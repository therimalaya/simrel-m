dgn <- lapply(dgn, function(x) simulatr::parse_parm(as.character(x)))
dgn$type <- "multivariate"
sobj <- do.call(simulatr, dgn)
plt11 <- plot(cov.df(sobj, type = "relpos", ordering = TRUE), "relpos") +
ggtitle("PC Covariance Matrix")
plt12 <- plot(cov.df(sobj, type = "rotation"), "relpred") +
ggtitle("Rotation Matrix")
plt13 <- plot(cov.df(sobj, type = "relpred"), "relpred") +
ggtitle("simulated data cov. matrix")
plusTheme <- theme_grey(base_size = 6.5) +
theme(text = element_text(size = 5.3),
legend.title = element_blank(),
legend.position = "top",
plot.title = element_blank(),
legend.key.size = unit(0.25, "cm"),
legend.margin = margin(2, 2, 0, 2),
plot.margin = margin(2, 2, 1, 1),
panel.grid = element_line(size = 0.03),
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1),
axis.ticks = element_line(size = 0.05))
(plt11 <- plt11 + plusTheme)
(plt12 <- plt12 + plusTheme)
(plt13 <- plt13 + plusTheme)
## Save TIFF photos
if (!file.exists("images/cov-plot-print-1-1.tiff")) {
savePlot(plt11, filename = "images/cov-plot-print-1-1.tiff")
}
if (!file.exists("images/cov-plot-print-1-2.tiff")) {
savePlot(plt12, filename = "images/cov-plot-print-1-2.tiff")
}
if (!file.exists("images/cov-plot-print-1-3.tiff")) {
savePlot(plt13, filename = "images/cov-plot-print-1-3.tiff")
}
design_table <- do.call(rbind, opts[c("gamma", "R2")])
dimnames(design_table) <- list(
c("Decay of eigenvalues $(\\gamma)$",
"Coef. of Determination $(\\rho^2_{w_j})$"),
paste0("Design", 1:4))
knitr::kable(design_table)
# pander::pander(
#   design_table, type = "rmarkdown",
#   split.cells = c(40, rep(30, 4)), split.tables = Inf,
#   justify = paste(rep("r", ncol(design_table) + 1), collapse = ""),
#   caption = "(\\#tab:parameter-settings) Parameter setting of simulated data for model comparison"
# )
avg_pred_err <- myData %>%
rename(pred_err = without_norm) %>%
group_by(Model, design, comp, R2, gamma) %>%
do(mean_se(.$pred_err)) %>%
rename(pred_err = y, upper = ymax, lower = ymin)
avgPredErr <- avg_pred_err %>%
group_by(Model, design) %>%
summarise(
comp = comp[which.min(pred_err)],
pred_err = min(pred_err),
label = paste0("(", comp, ", ", round(pred_err, 2), ")")
)
avgPredErr_lbl <- avgPredErr %>%
select(-comp, -pred_err) %>%
mutate(design = paste0("Design: ", design)) %>%
spread(design, label)
avgPredErr_idx <- avgPredErr %>%
select(-comp, -label) %>%
mutate(design = paste0("Design: ", design)) %>%
spread(design, pred_err) %>%
ungroup() %>%
select(-Model) %>%
do({sapply(., function(x) x == min(x)) %>% as_tibble()}) %>%
as.matrix() %>%
which(arr.ind = TRUE)
avgPredErr_idx[, "col"] <- avgPredErr_idx[, "col"] + 1
avgPredErr_lbl %>%
as.data.frame() %>%
pander(emphasize.strong.cells = avgPredErr_idx,
emphasize.verbatim.cols = 2:ncol(.),
emphasize.italics.cells = avgPredErr_idx,
emphasize.italics.cols = 1, justify = "lcccc",
caption = "(\\#tab:min-error) Minimum average prediction error (number of components corresponding to minimum prediction error, minimum prediction error) (For $Y\\text{env}$, the number of response components is given)")
topBest <- avgPredErr %>%
ungroup() %>%
group_by(design) %>%
summarize(
Model = Model[which.min(pred_err)],
comp = comp[which.min(pred_err)],
pred_err = min(pred_err)
)
plot_label <- avg_pred_err %>%
ungroup() %>%
select(R2, gamma, design) %>%
unique() %>%
transmute(
design = unique(design),
Model = NA,
x = Inf, y = c(Inf, Inf, -Inf, -Inf),
label = paste0("R2: ", R2, "\ngamma: ", gamma),
type = "Properties",
v = c(1.2, 1.2, -1.2, -1)
)
plt <- avg_pred_err %>%
filter(Model != "OLS") %>%
mutate(type = "Plot") %>%
ggplot(aes(comp, pred_err, fill = Model)) +
geom_ribbon(aes(ymax = upper, ymin = lower), alpha = 0.1) +
geom_line(aes(color = Model), size = 0.20) +
geom_point(shape = 21, size = 0.7, aes(color = Model)) +
geom_hline(data = avg_pred_err %>%
filter(Model == "OLS", comp == 1),
aes(yintercept = pred_err, color = Model),
linetype = 2, size = 0.15) +
geom_point(data = avg_pred_err %>%
filter(Model == "OLS", comp == 1),
aes(y = pred_err, color = Model), size = 0.7) +
geom_text(aes(label = label, x = Inf, y = y, vjust = v),
data = plot_label,
hjust = 1, family = "mono", size = rel(3)) +
scale_size_continuous(range = c(0.1, 2), breaks = NULL) +
scale_fill_discrete(l = 40) +
labs(x = "Number of Components",
y = expression(paste('Prediction Error (||', alpha, '||'[F], ")"))) +
facet_wrap( ~ design, labeller = label_both) +
theme_gray(base_size = 10) +
theme(legend.position = "bottom") +
scale_x_continuous(breaks = seq(0, 10, 1)) +
ggtitle("Prediction Error",
sub = "Averaged over 20 replicated Datasets of same properties") +
guides(color = guide_legend(nrow = 1),
fill = guide_legend(nrow = 1))
if (!file.exists("images/pred-plot.tiff")) {
ggsave(plt, filename = "images/pred-plot.tiff", device = "tiff",
width = 16.7, units = "cm", dpi = 800, height = 11.7)
}
plot(plt)
knitr::kable(design_table, caption = "(\\#tab:parameter-settings) Parameter setting of simulated data for model comparison")
# pander::pander(
#   design_table, type = "rmarkdown",
#   split.cells = c(40, rep(30, 4)), split.tables = Inf,
#   justify = paste(rep("r", ncol(design_table) + 1), collapse = ""),
#   caption = "(\\#tab:parameter-settings) Parameter setting of simulated data for model comparison"
# )
knitr::kable(design_table, escape = FALSE,
caption = "Parameter setting of simulated data for model comparison")
# pander::pander(
#   design_table, type = "rmarkdown",
#   split.cells = c(40, rep(30, 4)), split.tables = Inf,
#   justify = paste(rep("r", ncol(design_table) + 1), collapse = ""),
#   caption = "(\\#tab:parameter-settings) Parameter setting of simulated data for model comparison"
# )
avgPredErr_lbl
avgPredErr <- avg_pred_err %>%
group_by(Model, design) %>%
summarise(
comp = comp[which.min(pred_err)],
pred_err = min(pred_err),
label = paste0("(", comp, ", ", round(pred_err, 2), ")")
)
avgPredErr_lbl <- avgPredErr %>%
select(-comp, -pred_err) %>%
mutate(design = paste0("Design: ", design)) %>%
spread(design, label)
avgPredErr_idx <- avgPredErr %>%
select(-comp, -label) %>%
mutate(design = paste0("Design: ", design)) %>%
spread(design, pred_err) %>%
ungroup() %>%
select(-Model) %>%
do({sapply(., function(x) x == min(x)) %>% as_tibble()}) %>%
as.matrix() %>%
which(arr.ind = TRUE)
avgPredErr_idx[, "col"] <- avgPredErr_idx[, "col"] + 1
# avgPredErr_lbl %>%
#   as.data.frame() %>%
#   pander(emphasize.strong.cells = avgPredErr_idx,
#          emphasize.verbatim.cols = 2:ncol(.),
#          emphasize.italics.cells = avgPredErr_idx,
#          emphasize.italics.cols = 1, justify = "lcccc",
#          caption = "(\\#tab:min-error) Minimum average prediction error (number of components corresponding to minimum prediction error, minimum prediction error) (For $Y\\text{env}$, the number of response components is given)")
avgPredErr_lbl
knitr::kable(avgPredErr_lbl)
knitr::kable(avgPredErr_lbl, booktabs = TRUE, align = "lcccc",
caption = "Minimum average prediction error (number of components corresponding to minimum prediction error, minimum prediction error) (For $Y\\text{env}$, the number of response components is given)")
?knitr::kable
knitr::kable
knitr:::kable_latex()
knitr:::kable_latex
avgPredErr_lbl
purrr::map_df(avgPredErr_lbl, ~paste("\\\{texttt\}", .x, "\}"))
purrr::map_df(avgPredErr_lbl, ~paste("\\\\{texttt\}", .x, "\\}"))
purrr::map_df(avgPredErr_lbl, ~paste("\\\\{texttt\\}", .x, "\\}"))
purrr::map_df(avgPredErr_lbl, ~paste("\\{texttt}", .x, "}"))
purrr::map_df(avgPredErr_lbl, ~paste0("\\{texttt}", .x, "}"))
purrr::map_df(avgPredErr_lbl, ~paste0("\\{texttt}", .x, "}"))
purrr::map_at(avgPredErr_lbl, -1, ~paste0("\\{texttt}", .x, "}"))
purrr::map_at(avgPredErr_lbl, -1, ~paste0("\\{texttt}", .x, "}")) %>%
as_tibble()
purrr::map_at(avgPredErr_lbl, 2:5, ~paste0("\\{texttt}", .x, "}"))
as_tibble(purrr::map_at(avgPredErr_lbl, 2:5, ~paste0("\\{texttt}", .x, "}")))
file.remove("Simrel-M.Rmd")
file.remove("Simrel-M.Rmd")
avgPredErr_lbl
avgPredErr
round(2.0050257, 2)
signif(2.0050257, 2)
signif(2.0050257, 5)
round(signif(2.0050257, 5), 2)
signif(round(2.0050257, 2), 5)
signif(round(2.5, 2), 5)
signif(round(2.54, 2), 5)
signif(round(2.59, 2), 5)
signif(round(2.549, 2), 5)
signif(round(2.599, 2), 5)
?knitr::kable
devtools::install_github("haozhu233/kableExtra")
devtools::install_github("haozhu233/kableExtra")
file.remove("Simrel-M.Rmd")
file.remove("Simrel-M.Rmd")
?column_spec
??column_spec
?column_spec
file.remove("Simrel-M.Rmd")
tbl <- as_tibble(purrr::map_at(avgPredErr_lbl, 2:5, ~paste0("\\texttt{", .x, "}")))
kable(tbl, booktabs = TRUE, align = "lcccc", escape = FALSE,
caption = "Minimum average prediction error (number of components corresponding to minimum prediction error, minimum prediction error) (For $Y\\text{env}$, the number of response components is given)") %>%
kable_styling(latex_options = 'striped', full_width = FALSE)%>%
column_spec(1, bold = TRUE, width = "10em") %>%
column_spec(2, width = "7em") %>%
row_spec(1, bold = TRUE)
library(knitr)
library(kableExtra)
library(kableExtra)
library(kableExtra)
kable(design_table, escape = FALSE, booktabs = TRUE,
caption = "Parameter setting of simulated data for model comparison") %>%
kable_styling(full_width = TRUE)
knitr::opts_chunk$set(
comment = NA,
message = FALSE,
warning = FALSE,
echo    = FALSE,
fig.pos = 'H'
)
evl <- !file.exists('scripts/output/pred-err.rdata')
source("scripts/01-setup.r")
if (evl) {
source("08-final-data.r")
} else {
load('output/pred-err.rdata')
setwd(owd)
}
library(knitr)
library(kableExtra)
plt11 <- plot(cov.df(sobj, type = "relpos", ordering = TRUE), "relpos") +
ggtitle("PC Covariance Matrix")
knitr::opts_chunk$set(
comment = NA,
message = FALSE,
warning = FALSE,
echo    = FALSE,
fig.pos = 'H'
)
evl <- !file.exists('scripts/output/pred-err.rdata')
source("scripts/01-setup.r")
if (evl) {
source("08-final-data.r")
} else {
load('output/pred-err.rdata')
setwd(owd)
}
library(knitr)
library(kableExtra)
dgn <- lapply(opts, function(x) x[[1]])
dgn <- lapply(dgn, function(x) simulatr::parse_parm(as.character(x)))
dgn$type <- "multivariate"
sobj <- do.call(simulatr, dgn)
plt11 <- plot(cov.df(sobj, type = "relpos", ordering = TRUE), "relpos") +
ggtitle("PC Covariance Matrix")
plt12 <- plot(cov.df(sobj, type = "rotation"), "relpred") +
ggtitle("Rotation Matrix")
plt13 <- plot(cov.df(sobj, type = "relpred"), "relpred") +
ggtitle("simulated data cov. matrix")
plusTheme <- theme_grey(base_size = 6.5) +
theme(text = element_text(size = 5.3),
legend.title = element_blank(),
legend.position = "top",
plot.title = element_blank(),
legend.key.size = unit(0.25, "cm"),
legend.margin = margin(2, 2, 0, 2),
plot.margin = margin(2, 2, 1, 1),
panel.grid = element_line(size = 0.03),
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1),
axis.ticks = element_line(size = 0.05))
(plt11 <- plt11 + plusTheme)
(plt12 <- plt12 + plusTheme)
(plt13 <- plt13 + plusTheme)
## Save TIFF photos
if (!file.exists("images/cov-plot-print-1-1.tiff")) {
savePlot(plt11, filename = "images/cov-plot-print-1-1.tiff")
}
if (!file.exists("images/cov-plot-print-1-2.tiff")) {
savePlot(plt12, filename = "images/cov-plot-print-1-2.tiff")
}
if (!file.exists("images/cov-plot-print-1-3.tiff")) {
savePlot(plt13, filename = "images/cov-plot-print-1-3.tiff")
}
design_table <- do.call(rbind, opts[c("gamma", "R2")])
dimnames(design_table) <- list(
c("Decay of eigenvalues $(\\gamma)$",
"Coef. of Determination $(\\rho^2_{w_j})$"),
paste0("Design", 1:4))
kable(design_table, escape = FALSE, booktabs = TRUE,
caption = "Parameter setting of simulated data for model comparison") %>%
kable_styling(full_width = TRUE)
# pander::pander(
#   design_table, type = "rmarkdown",
#   split.cells = c(40, rep(30, 4)), split.tables = Inf,
#   justify = paste(rep("r", ncol(design_table) + 1), collapse = ""),
#   caption = "(\\#tab:parameter-settings) Parameter setting of simulated data for model comparison"
# )
avg_pred_err <- myData %>%
rename(pred_err = without_norm) %>%
group_by(Model, design, comp, R2, gamma) %>%
do(mean_se(.$pred_err)) %>%
rename(pred_err = y, upper = ymax, lower = ymin)
avgPredErr <- avg_pred_err %>%
group_by(Model, design) %>%
summarise(
comp = comp[which.min(pred_err)],
pred_err = min(pred_err),
label = paste0("(", comp, ", ", format(round(pred_err, 2), nsmall = 2), ")")
)
avgPredErr_lbl <- avgPredErr %>%
select(-comp, -pred_err) %>%
mutate(design = paste0("Design: ", design)) %>%
spread(design, label)
avgPredErr_idx <- avgPredErr %>%
select(-comp, -label) %>%
mutate(design = paste0("Design: ", design)) %>%
spread(design, pred_err) %>%
ungroup() %>%
select(-Model) %>%
do({sapply(., function(x) x == min(x)) %>% as_tibble()}) %>%
as.matrix() %>%
which(arr.ind = TRUE)
avgPredErr_idx[, "col"] <- avgPredErr_idx[, "col"] + 1
# avgPredErr_lbl %>%
#   as.data.frame() %>%
#   pander(emphasize.strong.cells = avgPredErr_idx,
#          emphasize.verbatim.cols = 2:ncol(.),
#          emphasize.italics.cells = avgPredErr_idx,
#          emphasize.italics.cols = 1, justify = "lcccc",
#          caption = "(\\#tab:min-error) Minimum average prediction error (number of components corresponding to minimum prediction error, minimum prediction error) (For $Y\\text{env}$, the number of response components is given)")
tbl <- as_tibble(purrr::map_at(avgPredErr_lbl, 2:5, ~paste0("\\texttt{", .x, "}")))
kable(tbl, booktabs = TRUE, align = "lcccc", escape = FALSE,
caption = "Minimum average prediction error (number of components corresponding to minimum prediction error, minimum prediction error) (For $Y\\text{env}$, the number of response components is given)") %>%
kable_styling(latex_options = 'striped', full_width = FALSE)%>%
column_spec(1, bold = TRUE, width = "10em") %>%
column_spec(2, width = "7em") %>%
row_spec(1, bold = TRUE)
topBest <- avgPredErr %>%
ungroup() %>%
group_by(design) %>%
summarize(
Model = Model[which.min(pred_err)],
comp = comp[which.min(pred_err)],
pred_err = min(pred_err)
)
plot_label <- avg_pred_err %>%
ungroup() %>%
select(R2, gamma, design) %>%
unique() %>%
transmute(
design = unique(design),
Model = NA,
x = Inf, y = c(Inf, Inf, -Inf, -Inf),
label = paste0("R2: ", R2, "\ngamma: ", gamma),
type = "Properties",
v = c(1.2, 1.2, -1.2, -1)
)
plt <- avg_pred_err %>%
filter(Model != "OLS") %>%
mutate(type = "Plot") %>%
ggplot(aes(comp, pred_err, fill = Model)) +
geom_ribbon(aes(ymax = upper, ymin = lower), alpha = 0.1) +
geom_line(aes(color = Model), size = 0.20) +
geom_point(shape = 21, size = 0.7, aes(color = Model)) +
geom_hline(data = avg_pred_err %>%
filter(Model == "OLS", comp == 1),
aes(yintercept = pred_err, color = Model),
linetype = 2, size = 0.15) +
geom_point(data = avg_pred_err %>%
filter(Model == "OLS", comp == 1),
aes(y = pred_err, color = Model), size = 0.7) +
geom_text(aes(label = label, x = Inf, y = y, vjust = v),
data = plot_label,
hjust = 1, family = "mono", size = rel(3)) +
scale_size_continuous(range = c(0.1, 2), breaks = NULL) +
scale_fill_discrete(l = 40) +
labs(x = "Number of Components",
y = expression(paste('Prediction Error (||', alpha, '||'[F], ")"))) +
facet_wrap( ~ design, labeller = label_both) +
theme_gray(base_size = 10) +
theme(legend.position = "bottom") +
scale_x_continuous(breaks = seq(0, 10, 1)) +
ggtitle("Prediction Error",
sub = "Averaged over 20 replicated Datasets of same properties") +
guides(color = guide_legend(nrow = 1),
fill = guide_legend(nrow = 1))
if (!file.exists("images/pred-plot.tiff")) {
ggsave(plt, filename = "images/pred-plot.tiff", device = "tiff",
width = 16.7, units = "cm", dpi = 800, height = 11.7)
}
plot(plt)
?row_spec
?column_spec
?Reduce
Reduce(sum, 1:5)
Reduce(`+`, 1:5)
tbl <- as_tibble(purrr::map_at(avgPredErr_lbl, 2:5, ~paste0("\\texttt{", .x, "}")))
kable(tbl, booktabs = TRUE, align = "lcccc", escape = FALSE,
caption = "Minimum average prediction error (number of components corresponding to minimum prediction error, minimum prediction error) (For $Y\\text{env}$, the number of response components is given)") %>%
kable_styling(latex_options = 'striped', full_width = FALSE)%>%
column_spec(1, bold = TRUE, width = "10em") %>%
reduce(2:5, ~column_spec(.x, width = "7em")) %>%
row_spec(0, bold = TRUE)
?reduce
kable(design_table, escape = FALSE, booktabs = TRUE,
caption = "Parameter setting of simulated data for model comparison") %>%
kable_styling(full_width = TRUE)
# pander::pander(
#   design_table, type = "rmarkdown",
#   split.cells = c(40, rep(30, 4)), split.tables = Inf,
#   justify = paste(rep("r", ncol(design_table) + 1), collapse = ""),
#   caption = "(\\#tab:parameter-settings) Parameter setting of simulated data for model comparison"
# )
tbl <- as_tibble(purrr::map_at(avgPredErr_lbl, 2:5, ~paste0("\\texttt{", .x, "}")))
kable(tbl, booktabs = TRUE, align = "lcccc", escape = FALSE,
caption = "Minimum average prediction error (number of components corresponding to minimum prediction error, minimum prediction error) (For $Y\\text{env}$, the number of response components is given)") %>%
kable_styling(latex_options = 'striped', full_width = FALSE)%>%
column_spec(1, bold = TRUE, width = "10em") %>%
column_spec(2, width = "7em") %>%
column_spec(3, width = "7em") %>%
column_spec(4, width = "7em") %>%
column_spec(5, width = "7em") %>%
row_spec(0, bold = TRUE)
purrr::map_at(avgPredErr_lbl, 2:5, ~paste0("\\texttt{", .x, "}"))
as.data.frame(purrr::map_at(avgPredErr_lbl, 2:5, ~paste0("\\texttt{", .x, "}")))
tbl <- as.data.frame(purrr::map_at(avgPredErr_lbl, 2:5, ~paste0("\\texttt{", .x, "}")))
kable(tbl, booktabs = TRUE, align = "lcccc", escape = FALSE,
caption = "Minimum average prediction error (number of components corresponding to minimum prediction error, minimum prediction error) (For $Y\\text{env}$, the number of response components is given)") %>%
kable_styling(latex_options = 'striped', full_width = FALSE)%>%
column_spec(1, bold = TRUE, width = "10em") %>%
column_spec(2, width = "7em") %>%
column_spec(3, width = "7em") %>%
column_spec(4, width = "7em") %>%
column_spec(5, width = "7em") %>%
row_spec(0, bold = TRUE)
tbl <- as.data.frame(purrr::map_at(avgPredErr_lbl, 2:5, ~paste0("\\texttt{", .x, "}")))
kable(tbl, booktabs = TRUE, align = "lcccc", escape = FALSE, format = "markdown",
caption = "Minimum average prediction error (number of components corresponding to minimum prediction error, minimum prediction error) (For $Y\\text{env}$, the number of response components is given)") %>%
kable_styling(latex_options = 'striped', full_width = FALSE)%>%
column_spec(1, bold = TRUE, width = "10em") %>%
column_spec(2, width = "7em") %>%
column_spec(3, width = "7em") %>%
column_spec(4, width = "7em") %>%
column_spec(5, width = "7em") %>%
row_spec(0, bold = TRUE)
tbl <- as.data.frame(purrr::map_at(avgPredErr_lbl, 2:5, ~paste0("\\texttt{", .x, "}")))
kable(tbl, booktabs = TRUE, align = "lcccc", escape = FALSE, format = "pandoc",
caption = "Minimum average prediction error (number of components corresponding to minimum prediction error, minimum prediction error) (For $Y\\text{env}$, the number of response components is given)") %>%
kable_styling(latex_options = 'striped', full_width = FALSE)%>%
column_spec(1, bold = TRUE, width = "10em") %>%
column_spec(2, width = "7em") %>%
column_spec(3, width = "7em") %>%
column_spec(4, width = "7em") %>%
column_spec(5, width = "7em") %>%
row_spec(0, bold = TRUE)
kable(design_table, escape = FALSE, booktabs = TRUE,
caption = "Parameter setting of simulated data for model comparison") %>%
kable_styling(full_width = TRUE, latex_options = "hold_position")
# pander::pander(
#   design_table, type = "rmarkdown",
#   split.cells = c(40, rep(30, 4)), split.tables = Inf,
#   justify = paste(rep("r", ncol(design_table) + 1), collapse = ""),
#   caption = "(\\#tab:parameter-settings) Parameter setting of simulated data for model comparison"
# )
file.remove("Simrel-M.Rmd")
if (!knitr:::is_html_output()) {
knitr::kable(design_table, escape = FALSE, booktabs = TRUE,
caption = "Parameter setting of simulated data for model comparison") %>%
kable_styling(full_width = TRUE, latex_options = "hold_position")
} else {
pander::pander(
design_table, type = "rmarkdown",
split.cells = c(40, rep(30, 4)), split.tables = Inf,
justify = paste(rep("r", ncol(design_table) + 1), collapse = ""),
caption = "(\\#tab:parameter-settings) Parameter setting of simulated data for model comparison"
)
}
knit_with_parameters('~/Dropbox (Personal)/Papers/01-simrel-m/Includes/04-WebInterface.Rmd')
bookdown::html_document2
?bookdown::html_document2
bookdown::render_book
?bookdown::render_book
file.remove("Simrel-M.Rmd")
file.remove("Simrel-M.Rmd")
file.remove("Simrel-M.Rmd")
file.remove("Simrel-M.Rmd")
file.remove("Simrel-M.Rmd")
file.remove("Simrel-M.Rmd")
file.remove("Simrel-M.Rmd")
file.remove("Simrel-M.bbl")
file.remove("Simrel-M.bbl")
file.remove("Simrel-M.Rmd")
