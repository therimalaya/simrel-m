type   = "multivariate"
)
sim.obj    <- do.call(simulatr, pars)
relpos.z   <- lapply(sim.obj$relpos, function(x) if (length(x) > 0) paste0("z_{", x, "}"))
relpos.x   <- lapply(sim.obj$relpos, function(x) if (length(x) > 0) paste0("x_{", x, "}"))
irrelpos.z <- paste0("z_{", setdiff(1:sim.obj$p, unlist(sim.obj$relpos)), "}")
irrelpos.x <- paste0("x_{", setdiff(1:sim.obj$p, unlist(sim.obj$relpos)), "}")
rel.z      <- lapply(sim.obj$relpred, function(x) if (length(x) > 0) paste0("z_{", x, "}"))
rel.x      <- lapply(sim.obj$relpred, function(x) if (length(x) > 0) paste0("x_{", x, "}"))
irrel.z    <- paste0("z_{", setdiff(1:sim.obj$p, unlist(sim.obj$relpred)), "}")
irrel.x    <- paste0("x_{", setdiff(1:sim.obj$p, unlist(sim.obj$relpred)), "}")
plt1 <- plot(cov.df(sim.obj, type = "relpos", ordering = TRUE), "relpos") +
ggtitle("PC Covariance Matrix")
plt2 <- plot(cov.df(sim.obj, type = "rotation"), "relpred") +
ggtitle("Rotation Matrix")
plt3 <- plot(cov.df(sim.obj, type = "relpred"), "relpred") +
ggtitle("simulated data cov. matrix")
plusTheme <- theme(text = element_text(size = 12),
legend.title = element_blank(),
legend.position = "top",
plot.title = element_blank())
plt1 + plusTheme
plt2 + plusTheme
plt3 + plusTheme
get_obsplot(sim.obj)
get_obsplot(sim.obj, FALSE)
knitr::opts_chunk$set(
comment = NA,
message = FALSE,
warning = FALSE,
echo    = FALSE,
fig.pos = 'H'
)
evl <- !file.exists('scripts/output/pred-err.rdata')
source("scripts/01-setup.r")
if (evl) {
source("08-final-data.r")
} else {
load('output/pred-err.rdata')
setwd(owd)
}
design_table <- do.call(rbind, opts[c("gamma", "R2")])
dimnames(design_table) <- list(
c("Decay of eigenvalues $(\\gamma)$",
"Coef. of Determination $(\\rho^2_{w_j})$"),
paste0("Design", 1:4))
pander::pander(
design_table, type = "rmarkdown",
split.cells = c(40, rep(30, 4)), split.tables = Inf,
justify = paste(rep("r", ncol(design_table) + 1), collapse = ""),
caption = "(\\#tab:parameter-settings) Parameter setting of simulated data for model comparison"
)
avg_pred_err <- myData %>%
rename(pred_err = without_norm) %>%
group_by(Model, design, comp, R2, gamma) %>%
do(mean_se(.$pred_err)) %>%
rename(pred_err = y, upper = ymax, lower = ymin)
avgPredErr <- avg_pred_err %>%
group_by(Model, design) %>%
summarise(
comp = comp[which.min(pred_err)],
pred_err = min(pred_err),
label = paste0("(", comp, ", ", round(pred_err, 2), ")")
)
avgPredErr_lbl <- avgPredErr %>%
select(-comp, -pred_err) %>%
mutate(design = paste0("Design: ", design)) %>%
spread(design, label)
avgPredErr_idx <- avgPredErr %>%
select(-comp, -label) %>%
mutate(design = paste0("Design: ", design)) %>%
spread(design, pred_err) %>%
ungroup() %>%
select(-Model) %>%
do({sapply(., function(x) x == min(x)) %>% as_tibble()}) %>%
as.matrix() %>%
which(arr.ind = TRUE)
avgPredErr_idx[, "col"] <- avgPredErr_idx[, "col"] + 1
avgPredErr_lbl %>%
as.data.frame() %>%
pander(emphasize.strong.cells = avgPredErr_idx,
emphasize.verbatim.cols = 2:ncol(.),
emphasize.italics.cells = avgPredErr_idx,
emphasize.italics.cols = 1,
split.cells = Inf, justify = "lcccc",
caption = "(\\#tab:min-error) Minimum average prediction error (number of components corresponding to minimum prediction error, minimum prediction error)")
topBest <- avgPredErr %>%
ungroup() %>%
group_by(design) %>%
summarize(
Model = Model[which.min(pred_err)],
comp = comp[which.min(pred_err)],
pred_err = min(pred_err)
)
plot_label <- avg_pred_err %>%
ungroup() %>%
select(R2, gamma, design) %>%
unique() %>%
transmute(
design = unique(design),
Model = NA,
x = Inf, y = c(Inf, Inf, -Inf, -Inf),
label = paste0("R2: ", R2, "\ngamma: ", gamma),
type = "Properties",
v = c(1.2, 1.2, -1.2, -1)
)
plt <- avg_pred_err %>%
filter(Model != "OLS") %>%
mutate(type = "Plot") %>%
ggplot(aes(comp, pred_err, fill = Model)) +
geom_ribbon(aes(ymax = upper, ymin = lower), alpha = 0.1) +
geom_line(aes(color = Model), size = 0.5) +
geom_point(shape = 21, size = 1, aes(color = Model)) +
geom_hline(data = avg_pred_err %>%
filter(Model == "OLS", comp == 1),
aes(yintercept = pred_err, color = Model),
linetype = 2, size = 0.5) +
geom_point(data = avg_pred_err %>%
filter(Model == "OLS", comp == 1),
aes(y = pred_err, color = Model), size = 1) +
geom_text(aes(label = label, x = Inf, y = y, vjust = v),
data = plot_label,
hjust = 1, family = "mono", size = rel(4)) +
scale_size_continuous(range = c(0.1, 2), breaks = NULL) +
scale_fill_discrete(l = 40) +
labs(x = "Number of Components",
y = expression(paste('Prediction Error (||', alpha, '||'[F], ")"))) +
facet_wrap( ~ design, labeller = label_both) +
theme_gray(base_size = 14) +
theme(legend.position = "bottom") +
scale_x_continuous(breaks = seq(0, 10, 1)) +
ggtitle("Prediction Error",
sub = "Averaged over 20 replicated Datasets of same properties") +
guides(color = guide_legend(nrow = 1),
fill = guide_legend(nrow = 1))
plot(plt)
sim.obj
sim.obj$minerror
rstudioapi::viewer("http://localhost:3000")
q("no")
make pdf
?rticles
??rticles
devtools::install_github("rstudio/rticles")
bookdown::pdf_book()
make pdf
bookdown::pdf_document2
bookdown::pdf_book
?pdf_document
??pdf_document
bookdown:::get_base_format()
bookdown:::get_base_format
?rmarkdown::pdf_document
source('~/Dropbox/Papers/01-simrel-m/manuscript.R')
manuscript(".")
source('~/Dropbox/Papers/01-simrel-m/manuscript.R')
manuscript(".")
manuscript()
config
bookdown::render_book()
bookdown::render_book(".")
?rmarkdown::render
?bookdown::pdf_book
bookdown::pdf_book(base_format = function(...) rmarkdown::pdf_document(..., template = "tempalates/template.tex")
)
bookdown::pdf_book(base_format = function(...) rmarkdown::pdf_document(..., template = "tempalates/template.tex"))
?bookdown::render_book
bookdown::render_book("index.Rmd", bookdown::pdf_book(base_format = function(...) rmarkdown::pdf_document(..., template = "tempalates/template.tex")))
bookdown::render_book("index.Rmd", bookdown::pdf_book(base_format = function(...) rmarkdown::pdf_document(..., template = "template.tex")))
bookdown::render_book("index.Rmd", bookdown::pdf_book(base_format = function(...) rmarkdown::pdf_document(..., template = file.path(getwd(), "templates/template.tex"))))
bookdown::render_book
knitr::include_graphics(file.path(getwd(), "_bookdown_files/Simrel-M_files/figure-latex/AppSimulatr.png"))
?bookdown:::render_book
devtools::install_github("rstudio/bookdown")
library(bookdown)
?bookdown::render_book
?bookdown::pdf_book
bookdown::render_book
bookdown::pdf_book()
bookdown::pdf_book
library(bookdown)
shiny::runGadget(sparklyr::connection_spark_shinyapp(), viewer = .rs.embeddedViewer)
devtools::install_github("rstudio/bookdown")
devtools::install_github("rstudio/bookdown", force = TRUE)
knitr::include_graphics(file.path(getwd(), "_bookdown_files/AppSimulatr.png"))
unlink('~/Dropbox/Papers/01-simrel-m/Includes/04-WebInterface_cache', recursive = TRUE)
q("no")
shiny::runGadget(sparklyr::connection_spark_shinyapp(), viewer = .rs.embeddedViewer)
rstudioapi::viewer("http://localhost:3000")
?geom_violine
?ggplot2::geom_violine
?ggplot2::geom_violin
knitr::opts_chunk$set(
comment = NA,
message = FALSE,
warning = FALSE,
echo    = FALSE,
fig.pos = 'H'
)
evl <- !file.exists('scripts/output/pred-err.rdata')
source("scripts/01-setup.r")
if (evl) {
source("08-final-data.r")
} else {
load('output/pred-err.rdata')
setwd(owd)
}
design_table <- do.call(rbind, opts[c("gamma", "R2")])
dimnames(design_table) <- list(
c("Decay of eigenvalues $(\\gamma)$",
"Coef. of Determination $(\\rho^2_{w_j})$"),
paste0("Design", 1:4))
pander::pander(
design_table, type = "rmarkdown",
split.cells = c(40, rep(30, 4)), split.tables = Inf,
justify = paste(rep("r", ncol(design_table) + 1), collapse = ""),
caption = "(\\#tab:parameter-settings) Parameter setting of simulated data for model comparison"
)
avg_pred_err <- myData %>%
rename(pred_err = without_norm) %>%
group_by(Model, design, comp, R2, gamma) %>%
do(mean_se(.$pred_err)) %>%
rename(pred_err = y, upper = ymax, lower = ymin)
avgPredErr <- avg_pred_err %>%
group_by(Model, design) %>%
summarise(
comp = comp[which.min(pred_err)],
pred_err = min(pred_err),
label = paste0("(", comp, ", ", round(pred_err, 2), ")")
)
avgPredErr_lbl <- avgPredErr %>%
select(-comp, -pred_err) %>%
mutate(design = paste0("Design: ", design)) %>%
spread(design, label)
avgPredErr_idx <- avgPredErr %>%
select(-comp, -label) %>%
mutate(design = paste0("Design: ", design)) %>%
spread(design, pred_err) %>%
ungroup() %>%
select(-Model) %>%
do({sapply(., function(x) x == min(x)) %>% as_tibble()}) %>%
as.matrix() %>%
which(arr.ind = TRUE)
avgPredErr_idx[, "col"] <- avgPredErr_idx[, "col"] + 1
avgPredErr_lbl %>%
as.data.frame() %>%
pander(emphasize.strong.cells = avgPredErr_idx,
emphasize.verbatim.cols = 2:ncol(.),
emphasize.italics.cells = avgPredErr_idx,
emphasize.italics.cols = 1,
split.cells = Inf, justify = "lcccc",
caption = "(\\#tab:min-error) Minimum average prediction error (number of components corresponding to minimum prediction error, minimum prediction error) (For $Y\\text{env}$, the number of response components is given)")
topBest <- avgPredErr %>%
ungroup() %>%
group_by(design) %>%
summarize(
Model = Model[which.min(pred_err)],
comp = comp[which.min(pred_err)],
pred_err = min(pred_err)
)
plot_label <- avg_pred_err %>%
ungroup() %>%
select(R2, gamma, design) %>%
unique() %>%
transmute(
design = unique(design),
Model = NA,
x = Inf, y = c(Inf, Inf, -Inf, -Inf),
label = paste0("R2: ", R2, "\ngamma: ", gamma),
type = "Properties",
v = c(1.2, 1.2, -1.2, -1)
)
plt <- avg_pred_err %>%
filter(Model != "OLS") %>%
mutate(type = "Plot") %>%
ggplot(aes(comp, pred_err, fill = Model)) +
geom_ribbon(aes(ymax = upper, ymin = lower), alpha = 0.1) +
geom_line(aes(color = Model), size = 0.5) +
geom_point(shape = 21, size = 1, aes(color = Model)) +
geom_hline(data = avg_pred_err %>%
filter(Model == "OLS", comp == 1),
aes(yintercept = pred_err, color = Model),
linetype = 2, size = 0.5) +
geom_point(data = avg_pred_err %>%
filter(Model == "OLS", comp == 1),
aes(y = pred_err, color = Model), size = 1) +
geom_text(aes(label = label, x = Inf, y = y, vjust = v),
data = plot_label,
hjust = 1, family = "mono", size = rel(4)) +
scale_size_continuous(range = c(0.1, 2), breaks = NULL) +
scale_fill_discrete(l = 40) +
labs(x = "Number of Components",
y = expression(paste('Prediction Error (||', alpha, '||'[F], ")"))) +
facet_wrap( ~ design, labeller = label_both) +
theme_gray(base_size = 14) +
theme(legend.position = "bottom") +
scale_x_continuous(breaks = seq(0, 10, 1)) +
ggtitle("Prediction Error",
sub = "Averaged over 20 replicated Datasets of same properties") +
guides(color = guide_legend(nrow = 1),
fill = guide_legend(nrow = 1))
plot(plt)
load("scripts/output/unsync/all-in-one.rdata")
sim_obj
sim_obj$obj[[1]]
source("scripts/00-plot-function.r")
ls()
get_obsplot(sim_obj$obj[[1]])
library(reshape2)
get_obsplot(sim_obj$obj[[1]])
ls()
cov.df(sim_obj$obj[[1]])
get.cov.df(cov.df(sim_obj$obj[[1]]))
plot(cov.df(cov.df(sim_obj$obj[[1]]), type = "relpos"), type = "relpos")
plot(cov.df(sim_obj$obj[[1]], type = "relpos"), type = "relpos")
unique(sim_obj$obj)
sim_obj
sim_obj %>%
group_by(design) %>%
do({
obj
})
sim_obj %>%
group_by(design) %>%
do({
.$obj
})
sim_obj %>%
group_by(design) %>%
do({
list(.$obj)
})
sim_obj %>%
group_by(design) %>%
do({
tibble(list(.$obj))
})
sim_obj %>%
group_by(design) %>%
do({
tibble(list(.$obj))
})
sim_obj %>%
group_by(design) %>%
do({
tibble(obj = list(.$obj))
})
sim <- sim_obj %>%
group_by(design) %>%
do({
tibble(obj = list(.$obj))
})
save(sim, file = "scripts/output/unsync/sim-obj.rdata")
pars
design_table
opts
lapply(opts, `[[`)
lapply(opts, `[`)
lapply(opts, `[1`)
lapply(opts, function(x) x[[1]])
append(lapply(opts, function(x) x[[1]]), type = "multivariate")
`[[<-`(lapply(opts, function(x) x[[1]]), "type", "multivariate")
do.call(simulatr, `[[<-`(lapply(opts, function(x) x[[1]]), "type", "multivariate"))
`[[<-`(lapply(opts, function(x) x[[1]]), "type", "multivariate")
do.call(parse_parm, `[[<-`(lapply(opts, function(x) x[[1]]), "type", "multivariate"))
do.call(simulatr::prepare_design, `[[<-`(lapply(opts, function(x) x[[1]]), "type", "multivariate"))
simulatr::prepare_design(`[[<-`(lapply(opts, function(x) x[[1]]), "type", "multivariate"))
simulatr::parse_parm(`[[<-`(lapply(opts, function(x) x[[1]]), "type", "multivariate"))
do.call(simulatr::parse_parm, `[[<-`(lapply(opts, function(x) x[[1]]), "type", "multivariate"))
lapply(`[[<-`(lapply(opts, function(x) x[[1]]), "type", "multivariate"), simulatr::parse_parm)
parse_parm("1,2;3,4")
parse_parm("1,2")
parse_parm("12")
`[[<-`(lapply(opts, function(x) x[[1]]), "type", "multivariate")
lapply(`[[<-`(lapply(opts, function(x) x[[1]]), "type", "multivariate"), function(x) parse_parm(as.character(x)))
plt1 <- plot(cov.df(sobj, type = "relpos", ordering = TRUE), "relpos") +
ggtitle("PC Covariance Matrix")
dgn <- lapply(opts, function(x) x[[1]])
dgn <- lapply(dgn, function(x) simulatr::parse_parm(as.character(x)))
dgn$type <- "multivariate"
sobj <- do.call(simulatr, dgn)
plt1 <- plot(cov.df(sobj, type = "relpos", ordering = TRUE), "relpos") +
ggtitle("PC Covariance Matrix")
plt3 <- plot(cov.df(sobj, type = "relpred"), "relpred") +
ggtitle("simulated data cov. matrix")
plusTheme <- theme(text = element_text(size = 12),
legend.title = element_blank(),
legend.position = "top",
plot.title = element_blank())
plt1 + plusTheme
plt3 + plusTheme
plt1 <- plot(cov.df(sobj, type = "relpos", ordering = TRUE), "relpos") +
ggtitle("PC Covariance Matrix")
plt3 <- plot(cov.df(sobj, type = "relpred"), "relpred") +
ggtitle("simulated data cov. matrix")
plusTheme <- theme(text = element_text(size = 12),
legend.title = element_blank(),
legend.position = "top",
plot.title = element_blank())
plt1 + plusTheme
plt3 + plusTheme
plt1 <- plot(cov.df(sobj, type = "relpos", ordering = TRUE), "relpos") +
ggtitle("PC Covariance Matrix")
plt3 <- plot(cov.df(sobj, type = "relpred"), "relpred") +
ggtitle("simulated data cov. matrix")
plusTheme <- theme(text = element_text(size = 12),
legend.title = element_blank(),
legend.position = "top",
plot.title = element_blank())
plt1 + plusTheme
plt3 + plusTheme
plt1 <- plot(cov.df(sobj, type = "relpos", ordering = TRUE), "relpos") +
ggtitle("PC Covariance Matrix")
plt3 <- plot(cov.df(sobj, type = "relpred"), "relpred") +
ggtitle("simulated data cov. matrix")
plusTheme <- theme(text = element_text(size = 12),
legend.title = element_blank(),
legend.position = "top",
plot.title = element_blank())
plt1 + plusTheme
plt3 + plusTheme
plt1 <- plot(cov.df(sobj, type = "relpos", ordering = TRUE), "relpos") +
ggtitle("PC Covariance Matrix")
plt3 <- plot(cov.df(sobj, type = "relpred"), "relpred") +
ggtitle("simulated data cov. matrix")
plusTheme <- theme(text = element_text(size = 12),
legend.title = element_blank(),
legend.position = "top",
plot.title = element_blank())
plt1 + plusTheme
plt3 + plusTheme
```{r cov-plot-print-1, results = 'hide', echo = FALSE, warning = FALSE, message = FALSE, out.width = '40%', fig.asp = 1.12, fig.subcap=c("Relevant Position", "Relevant Predictors"), fig.cap = 'Covariance structure of simulated data before and after rotation. The colors show which predictor (component) variables are relevant for which response (component) variable', fig.width=4, fig.align='center'}
dgn <- lapply(dgn, function(x) simulatr::parse_parm(as.character(x)))
knitr::opts_chunk$set(
comment = NA,
message = FALSE,
warning = FALSE,
echo    = FALSE,
fig.pos = 'H'
)
evl <- !file.exists('scripts/output/pred-err.rdata')
source("scripts/01-setup.r")
if (evl) {
source("08-final-data.r")
} else {
load('output/pred-err.rdata')
setwd(owd)
}
dgn <- lapply(opts, function(x) x[[1]])
dgn <- lapply(dgn, function(x) simulatr::parse_parm(as.character(x)))
dgn$type <- "multivariate"
sobj <- do.call(simulatr, dgn)
plt1 <- plot(cov.df(sobj, type = "relpos", ordering = TRUE), "relpos") +
ggtitle("PC Covariance Matrix")
plt3 <- plot(cov.df(sobj, type = "relpred"), "relpred") +
ggtitle("simulated data cov. matrix")
plusTheme <- theme(text = element_text(size = 12),
legend.title = element_blank(),
legend.position = "top",
plot.title = element_blank())
plt1 + plusTheme
plt3 + plusTheme
plt1 <- plot(cov.df(sobj, type = "relpos", ordering = TRUE), "relpos") +
ggtitle("PC Covariance Matrix")
plt3 <- plot(cov.df(sobj, type = "relpred"), "relpred") +
ggtitle("simulated data cov. matrix")
plusTheme <- theme(text = element_text(size = 12),
legend.title = element_blank(),
legend.position = "top",
plot.title = element_blank())
plt1 + plusTheme
plt3 + plusTheme
get_obsplot(sim.obj)
pkgs <- c("simulatr", "ggplot2", "reshape2")
for (pkg in pkgs) require(pkg, character.only = T)
source(file.path(getwd(), "scripts/00-plot-function.R"))
set.seed(123)
pars <- list(
n      = 25,
p      = 10,
m      = 4,
gamma  = 0.8,
q      = c(3, 3, 2),
R2     = c(0.8, 0.8, 0.7),
relpos = list(1:2, 3:4, 5:6),
ypos   = list(1, 2, 3:4),
type   = "multivariate"
)
sim.obj    <- do.call(simulatr, pars)
relpos.z   <- lapply(sim.obj$relpos, function(x) if (length(x) > 0) paste0("z_{", x, "}"))
relpos.x   <- lapply(sim.obj$relpos, function(x) if (length(x) > 0) paste0("x_{", x, "}"))
irrelpos.z <- paste0("z_{", setdiff(1:sim.obj$p, unlist(sim.obj$relpos)), "}")
irrelpos.x <- paste0("x_{", setdiff(1:sim.obj$p, unlist(sim.obj$relpos)), "}")
rel.z      <- lapply(sim.obj$relpred, function(x) if (length(x) > 0) paste0("z_{", x, "}"))
rel.x      <- lapply(sim.obj$relpred, function(x) if (length(x) > 0) paste0("x_{", x, "}"))
irrel.z    <- paste0("z_{", setdiff(1:sim.obj$p, unlist(sim.obj$relpred)), "}")
irrel.x    <- paste0("x_{", setdiff(1:sim.obj$p, unlist(sim.obj$relpred)), "}")
plt1 <- plot(cov.df(sim.obj, type = "relpos", ordering = TRUE), "relpos") +
ggtitle("PC Covariance Matrix")
plt2 <- plot(cov.df(sim.obj, type = "rotation"), "relpred") +
ggtitle("Rotation Matrix")
plt3 <- plot(cov.df(sim.obj, type = "relpred"), "relpred") +
ggtitle("simulated data cov. matrix")
plusTheme <- theme(text = element_text(size = 12),
legend.title = element_blank(),
legend.position = "top",
plot.title = element_blank())
plt1 + plusTheme
plt2 + plusTheme
plt3 + plusTheme
get_obsplot(sim.obj)
get_obsplot(sim.obj, FALSE)
