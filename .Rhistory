savePlot(plt11, filename = "images/cov-plot-print-1-1.tiff")
}
if (!file.exists("images/cov-plot-print-1-2.tiff")) {
savePlot(plt12, filename = "images/cov-plot-print-1-2.tiff")
}
if (!file.exists("images/cov-plot-print-1-3.tiff")) {
savePlot(plt13, filename = "images/cov-plot-print-1-3.tiff")
}
design_table <- do.call(rbind, opts[c("gamma", "R2")])
dimnames(design_table) <- list(
c("Decay of eigenvalues $(\\gamma)$",
"Coef. of Determination $(\\rho^2_{w_j})$"),
paste0("Design", 1:4))
if (!knitr:::is_html_output()) {
knitr::kable(design_table, escape = FALSE, booktabs = TRUE,
caption = "Parameter setting of simulated data for comparison of estimation methods") %>%
kable_styling(full_width = TRUE, latex_options = "hold_position")
} else {
pander::pander(
design_table, type = "rmarkdown",
split.cells = c(40, rep(30, 4)), split.tables = Inf,
justify = paste(rep("r", ncol(design_table) + 1), collapse = ""),
caption = "(\\#tab:parameter-settings) Parameter setting of simulated data for comparison of estimation methods"
)
}
avg_pred_err <- myData %>%
rename(pred_err = without_norm) %>%
group_by(Model, design, comp, R2, gamma) %>%
do(mean_se(.$pred_err)) %>%
rename(pred_err = y, upper = ymax, lower = ymin)
avgPredErr <- avg_pred_err %>%
group_by(Model, design) %>%
summarise(
comp = comp[which.min(pred_err)],
pred_err = min(pred_err),
label = paste0("(", comp, ", ", format(round(pred_err, 2), nsmall = 2), ")")
)
avgPredErr_lbl <- avgPredErr %>%
select(-comp, -pred_err) %>%
mutate(design = paste0("Design: ", design)) %>%
spread(design, label)
avgPredErr_idx <- avgPredErr %>%
select(-comp, -label) %>%
mutate(design = paste0("Design: ", design)) %>%
spread(design, pred_err) %>%
ungroup() %>%
select(-Model) %>%
do({sapply(., function(x) x == min(x)) %>% as_tibble()}) %>%
as.matrix() %>%
which(arr.ind = TRUE)
avgPredErr_idx[, "col"] <- avgPredErr_idx[, "col"] + 1
if (!knitr:::is_html_output()) {
kable(avgPredErr_lbl, booktabs = TRUE, align = "lcccc", escape = FALSE,
caption = "Minimum average prediction error
(number of components corresponding to minimum prediction error, minimum prediction error)
(For $Y\\text{env}$, the number of response components is given)") %>%
kable_styling(latex_options = 'striped')%>%
column_spec(1, bold = TRUE, width = "7em") %>%
column_spec(2, monospace = TRUE, width = "6em") %>%
column_spec(3, monospace = TRUE, width = "6em") %>%
column_spec(4, monospace = TRUE, width = "6em") %>%
column_spec(5, monospace = TRUE, width = "6em") %>%
row_spec(0, bold = TRUE, monospace = FALSE)
} else {
avgPredErr_lbl %>%
as.data.frame() %>%
pander(emphasize.strong.cells = avgPredErr_idx,
emphasize.verbatim.cols = 2:ncol(.),
emphasize.italics.cells = avgPredErr_idx,
emphasize.italics.cols = 1, justify = "lcccc",
caption = "(\\#tab:min-error) Minimum average prediction error
(number of components corresponding to minimum prediction error, minimum prediction error)
(For $Y\\text{env}$, the number of response components is given)")
}
knitr::opts_chunk$set(
comment = NA,
message = FALSE,
warning = FALSE,
echo    = FALSE,
fig.pos = 'H'
)
evl <- !file.exists('scripts/output/pred-err.rdata')
source("scripts/01-setup.r")
if (evl) {
source("08-final-data.r")
} else {
load('output/pred-err.rdata')
setwd(owd)
}
library(knitr)
library(kableExtra)
dgn <- lapply(opts, function(x) x[[1]])
dgn <- lapply(dgn, function(x) simulatr::parse_parm(as.character(x)))
dgn$type <- "multivariate"
sobj <- do.call(simulatr, dgn)
plt11 <- plot(cov.df(sobj, type = "relpos", ordering = TRUE), "relpos") +
ggtitle("PC Covariance Matrix")
plt12 <- plot(cov.df(sobj, type = "rotation"), "relpred") +
ggtitle("Rotation Matrix")
plt13 <- plot(cov.df(sobj, type = "relpred"), "relpred") +
ggtitle("simulated data cov. matrix")
plusTheme <- theme_grey(base_size = 6.5) +
theme(text = element_text(size = 5.3),
legend.title = element_blank(),
legend.position = "top",
plot.title = element_blank(),
legend.key.size = unit(0.25, "cm"),
legend.margin = margin(2, 2, 0, 2),
plot.margin = margin(2, 2, 1, 1),
panel.grid = element_line(size = 0.03),
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1),
axis.ticks = element_line(size = 0.05))
(plt11 <- plt11 + plusTheme)
(plt12 <- plt12 + plusTheme)
(plt13 <- plt13 + plusTheme)
## Save TIFF photos
if (!file.exists("images/cov-plot-print-1-1.tiff")) {
savePlot(plt11, filename = "images/cov-plot-print-1-1.tiff")
}
if (!file.exists("images/cov-plot-print-1-2.tiff")) {
savePlot(plt12, filename = "images/cov-plot-print-1-2.tiff")
}
if (!file.exists("images/cov-plot-print-1-3.tiff")) {
savePlot(plt13, filename = "images/cov-plot-print-1-3.tiff")
}
design_table <- do.call(rbind, opts[c("gamma", "R2")])
dimnames(design_table) <- list(
c("Decay of eigenvalues $(\\gamma)$",
"Coef. of Determination $(\\rho^2_{w_j})$"),
paste0("Design", 1:4))
if (!knitr:::is_html_output()) {
knitr::kable(design_table, escape = FALSE, booktabs = TRUE,
caption = "Parameter setting of simulated data for comparison of estimation methods") %>%
kable_styling(full_width = TRUE, latex_options = "hold_position")
} else {
pander::pander(
design_table, type = "rmarkdown",
split.cells = c(40, rep(30, 4)), split.tables = Inf,
justify = paste(rep("r", ncol(design_table) + 1), collapse = ""),
caption = "(\\#tab:parameter-settings) Parameter setting of simulated data for comparison of estimation methods"
)
}
avg_pred_err <- myData %>%
rename(pred_err = without_norm) %>%
group_by(Model, design, comp, R2, gamma) %>%
do(mean_se(.$pred_err)) %>%
rename(pred_err = y, upper = ymax, lower = ymin)
avgPredErr <- avg_pred_err %>%
group_by(Model, design) %>%
summarise(
comp = comp[which.min(pred_err)],
pred_err = min(pred_err),
label = paste0("(", comp, ", ", format(round(pred_err, 2), nsmall = 2), ")")
)
avgPredErr_lbl <- avgPredErr %>%
select(-comp, -pred_err) %>%
mutate(design = paste0("Design: ", design)) %>%
spread(design, label)
avgPredErr_idx <- avgPredErr %>%
select(-comp, -label) %>%
mutate(design = paste0("Design: ", design)) %>%
spread(design, pred_err) %>%
ungroup() %>%
select(-Model) %>%
do({sapply(., function(x) x == min(x)) %>% as_tibble()}) %>%
as.matrix() %>%
which(arr.ind = TRUE)
avgPredErr_idx[, "col"] <- avgPredErr_idx[, "col"] + 1
if (!knitr:::is_html_output()) {
kable(avgPredErr_lbl, booktabs = TRUE, align = "lcccc", escape = FALSE,
caption = "Minimum average prediction error
(number of components corresponding to minimum prediction error, minimum prediction error)
(For $Y\\text{env}$, the number of response components is given)") %>%
kable_styling(latex_options = 'striped')%>%
column_spec(1, bold = TRUE, width = "7em") %>%
column_spec(2, monospace = TRUE, width = "6em") %>%
column_spec(3, monospace = TRUE, width = "6em") %>%
column_spec(4, monospace = TRUE, width = "6em") %>%
column_spec(5, monospace = TRUE, width = "6em") %>%
row_spec(0, bold = TRUE)
} else {
avgPredErr_lbl %>%
as.data.frame() %>%
pander(emphasize.strong.cells = avgPredErr_idx,
emphasize.verbatim.cols = 2:ncol(.),
emphasize.italics.cells = avgPredErr_idx,
emphasize.italics.cols = 1, justify = "lcccc",
caption = "(\\#tab:min-error) Minimum average prediction error
(number of components corresponding to minimum prediction error, minimum prediction error)
(For $Y\\text{env}$, the number of response components is given)")
}
topBest <- avgPredErr %>%
ungroup() %>%
group_by(design) %>%
summarize(
Model = Model[which.min(pred_err)],
comp = comp[which.min(pred_err)],
pred_err = min(pred_err)
)
plot_label <- avg_pred_err %>%
ungroup() %>%
select(R2, gamma, design) %>%
unique() %>%
transmute(
design = unique(design),
Model = NA,
x = Inf, y = c(Inf, Inf, -Inf, -Inf),
label = paste0("R2: ", R2, "\ngamma: ", gamma),
type = "Properties",
v = c(1.2, 1.2, -1.2, -1)
)
plt <- avg_pred_err %>%
filter(Model != "OLS") %>%
mutate(type = "Plot") %>%
ggplot(aes(comp, pred_err, fill = Model)) +
geom_ribbon(aes(ymax = upper, ymin = lower), alpha = 0.1) +
geom_line(aes(color = Model), size = 0.20) +
geom_point(shape = 21, size = 0.7, aes(color = Model)) +
geom_hline(data = avg_pred_err %>%
filter(Model == "OLS", comp == 1),
aes(yintercept = pred_err, color = Model),
linetype = 2, size = 0.15) +
geom_point(data = avg_pred_err %>%
filter(Model == "OLS", comp == 1),
aes(y = pred_err, color = Model), size = 0.7) +
geom_text(aes(label = label, x = Inf, y = y, vjust = v),
data = plot_label,
hjust = 1, family = "mono", size = rel(3)) +
scale_size_continuous(range = c(0.1, 2), breaks = NULL) +
scale_fill_discrete(l = 40) +
labs(x = "Number of Components",
y = expression(paste('Prediction Error (||', alpha, '||'[F], ")"))) +
facet_wrap( ~ design, labeller = label_both) +
theme_gray(base_size = 10) +
theme(legend.position = "bottom") +
scale_x_continuous(breaks = seq(0, 10, 1)) +
ggtitle("Prediction Error",
sub = "Averaged over 20 replicated Datasets of same properties") +
guides(color = guide_legend(nrow = 1),
fill = guide_legend(nrow = 1))
if (!file.exists("images/pred-plot.tiff")) {
ggsave(plt, filename = "images/pred-plot.tiff", device = "tiff",
width = 16.7, units = "cm", dpi = 800, height = 11.7)
}
plot(plt)
avgPredErr
avg_pred_err
myData %>%
rename(pred_err = without_norm) %>%
group_by(Model, design, comp, R2, gamma) %>%
do(mean_se(.$pred_err)) %>%
rename(pred_err = y, upper = ymax, lower = ymin) %>%
mutate(Model = gsub("\\<PLS\\>", "PLS2", Model))
myData %>%
rename(pred_err = without_norm) %>%
group_by(Model, design, comp, R2, gamma) %>%
do(mean_se(.$pred_err)) %>%
rename(pred_err = y, upper = ymax, lower = ymin) %>%
ungroup() %>%
mutate(Model = gsub("\\<PLS\\>", "PLS2", Model))
myData %>%
rename(pred_err = without_norm) %>%
group_by(Model, design, comp, R2, gamma) %>%
do(mean_se(.$pred_err)) %>%
rename(pred_err = y, upper = ymax, lower = ymin) %>%
ungroup() %>%
mutate(Model = gsub("\\<PLS\\>", "PLS2", Model))
myData %>%
rename(pred_err = without_norm) %>%
group_by(Model, design, comp, R2, gamma) %>%
do(mean_se(.$pred_err)) %>%
rename(pred_err = y, upper = ymax, lower = ymin) %>%
ungroup() %>%
mutate(Model = gsub("\\<PLS\\>", "PLS2", Model)) %>%
print(n = 50)
myData %>%
rename(pred_err = without_norm) %>%
group_by(Model, design, comp, R2, gamma) %>%
do(mean_se(.$pred_err)) %>%
rename(pred_err = y, upper = ymax, lower = ymin) %>%
ungroup() %>%
mutate(Model = gsub("\\<PLS\\>", "PLS2", Model)) %>%
filter(contains("PLS", vars = Model))
myData %>%
rename(pred_err = without_norm) %>%
group_by(Model, design, comp, R2, gamma) %>%
do(mean_se(.$pred_err)) %>%
rename(pred_err = y, upper = ymax, lower = ymin) %>%
ungroup() %>%
mutate(Model = gsub("\\<PLS\\>", "PLS2", Model)) %>%
filter(grepl("PLS", Model))
myData %>%
rename(pred_err = without_norm) %>%
group_by(Model, design, comp, R2, gamma) %>%
do(mean_se(.$pred_err)) %>%
rename(pred_err = y, upper = ymax, lower = ymin) %>%
ungroup() %>%
mutate(Model = gsub("\\<PLS\\>", "PLS2", Model)) %>%
filter(grepl("PLS", Model)) %>%
print(n = 200)
avg_pred_err <- myData %>%
rename(pred_err = without_norm) %>%
group_by(Model, design, comp, R2, gamma) %>%
do(mean_se(.$pred_err)) %>%
rename(pred_err = y, upper = ymax, lower = ymin) %>%
ungroup() %>%
mutate(Model = gsub("\\<PLS\\>", "PLS2", Model))
avgPredErr <- avg_pred_err %>%
group_by(Model, design) %>%
summarise(
comp = comp[which.min(pred_err)],
pred_err = min(pred_err),
label = paste0("(", comp, ", ", format(round(pred_err, 2), nsmall = 2), ")")
)
avgPredErr_lbl <- avgPredErr %>%
select(-comp, -pred_err) %>%
mutate(design = paste0("Design: ", design)) %>%
spread(design, label)
avgPredErr_idx <- avgPredErr %>%
select(-comp, -label) %>%
mutate(design = paste0("Design: ", design)) %>%
spread(design, pred_err) %>%
ungroup() %>%
select(-Model) %>%
do({sapply(., function(x) x == min(x)) %>% as_tibble()}) %>%
as.matrix() %>%
which(arr.ind = TRUE)
avgPredErr_idx[, "col"] <- avgPredErr_idx[, "col"] + 1
if (!knitr:::is_html_output()) {
kable(avgPredErr_lbl, booktabs = TRUE, align = "lcccc", escape = FALSE,
caption = "Minimum average prediction error
(number of components corresponding to minimum prediction error, minimum prediction error)
(For $Y\\text{env}$, the number of response components is given)") %>%
kable_styling(latex_options = 'striped')%>%
column_spec(1, bold = TRUE, width = "7em") %>%
column_spec(2, monospace = TRUE, width = "6em") %>%
column_spec(3, monospace = TRUE, width = "6em") %>%
column_spec(4, monospace = TRUE, width = "6em") %>%
column_spec(5, monospace = TRUE, width = "6em") %>%
row_spec(0, bold = TRUE)
} else {
avgPredErr_lbl %>%
as.data.frame() %>%
pander(emphasize.strong.cells = avgPredErr_idx,
emphasize.verbatim.cols = 2:ncol(.),
emphasize.italics.cells = avgPredErr_idx,
emphasize.italics.cols = 1, justify = "lcccc",
caption = "(\\#tab:min-error) Minimum average prediction error
(number of components corresponding to minimum prediction error, minimum prediction error)
(For $Y\\text{env}$, the number of response components is given)")
}
topBest <- avgPredErr %>%
ungroup() %>%
group_by(design) %>%
summarize(
Model = Model[which.min(pred_err)],
comp = comp[which.min(pred_err)],
pred_err = min(pred_err)
)
plot_label <- avg_pred_err %>%
ungroup() %>%
select(R2, gamma, design) %>%
unique() %>%
transmute(
design = unique(design),
Model = NA,
x = Inf, y = c(Inf, Inf, -Inf, -Inf),
label = paste0("R2: ", R2, "\ngamma: ", gamma),
type = "Properties",
v = c(1.2, 1.2, -1.2, -1)
)
plt <- avg_pred_err %>%
filter(Model != "OLS") %>%
mutate(type = "Plot") %>%
ggplot(aes(comp, pred_err, fill = Model)) +
geom_ribbon(aes(ymax = upper, ymin = lower), alpha = 0.1) +
geom_line(aes(color = Model), size = 0.20) +
geom_point(shape = 21, size = 0.7, aes(color = Model)) +
geom_hline(data = avg_pred_err %>%
filter(Model == "OLS", comp == 1),
aes(yintercept = pred_err, color = Model),
linetype = 2, size = 0.15) +
geom_point(data = avg_pred_err %>%
filter(Model == "OLS", comp == 1),
aes(y = pred_err, color = Model), size = 0.7) +
geom_text(aes(label = label, x = Inf, y = y, vjust = v),
data = plot_label,
hjust = 1, family = "mono", size = rel(3)) +
scale_size_continuous(range = c(0.1, 2), breaks = NULL) +
scale_fill_discrete(l = 40) +
labs(x = "Number of Components",
y = expression(paste('Prediction Error (||', alpha, '||'[F], ")"))) +
facet_wrap( ~ design, labeller = label_both) +
theme_gray(base_size = 10) +
theme(legend.position = "bottom") +
scale_x_continuous(breaks = seq(0, 10, 1)) +
ggtitle("Prediction Error",
sub = "Averaged over 20 replicated Datasets of same properties") +
guides(color = guide_legend(nrow = 1),
fill = guide_legend(nrow = 1))
if (!file.exists("images/pred-plot.tiff")) {
ggsave(plt, filename = "images/pred-plot.tiff", device = "tiff",
width = 16.7, units = "cm", dpi = 800, height = 11.7)
}
plot(plt)
args(rmarkdown::render)
Sys.Date()
unlink('letter_cache', recursive = TRUE)
RefManageR::ReadBib("ref-db.bib")
bib <- RefManageR::ReadBib("ref-db.bib")
bib <- RefManageR::ReadBib("ref-db.bib", check = FALSE)
bib
bib$saebo2015simrel
RefManageR::Cite(bib)
?cite
?Cite
RefManageR::TextCite(bib, "sovle")
RefManageR::TextCite(bib, "saebo")
RefManageR::TextCite(bib, "saebo2015simrel")
RefManageR::TextCite(bib, "saebo2015simrel")
bib
RefManageR::ReadBib("ref-db.bib")
bib <- RefManageR::ReadBib("ref-db.bib", check = FALSE)
RefManageR::TextCite(bib, "saebo2015simrel")
RefManageR::TextCite(bib, "saebo2015simrel)
RefManageR::TextCite(bib, saebo2015simrel)
RefManageR::TextCite(bib)
RefManageR::TextCite(bib)[[1]]
library(RefManageR)
TextCite(bib, "Saebo")
TextCite(bib, "simrel")
TextCite(bib, "simrel")
bib$saebo2015simrel
TextCite(bib$saebo2015simrel)
TextCite(bib, "saebo2015simrel")
(TextCite(bib, "saebo2015simrel"))
cat(TextCite(bib, "saebo2015simrel"))
?RefManageR
Cite(bib)
?BibEntry()
GetBibEntryWithDOI("https://doi.org/10.1016/j.chemolab.2015.05.012")
GetBibEntryWithDOI("10.1016/j.chemolab.2015.05.012")
GetBibEntryWithDOI("http://doi.org/10.1016/j.chemolab.2015.05.012")
GetBibEntryWithDOI("http://doi.org/10.1016/j.chemolab.2015.05.012")
GetBibEntryWithDOI("10.1016/j.chemolab.2015.05.012")
?utils::citeNatbib()
bib <- bibtex::read.bib("ref-db.bib")
bib <- bibtex::read.bib("ref-db.bib")
bib <- bibtex::read.bib("ref-db.bib")
bib <- bibtex::read.bib("ref-db.bib")
bib$saebo2008lpls
TextCite(bib, "saebo2015simrel")
?RefManageR
print(bib)
print(bib$saebo2015simrel)
print(bib, 'saebo2015simrel')
print(bib, "text", 'saebo2015simrel')
print(bib, "text")
print(bib)
print(bib)
bib
bib <- RefManageR::ReadBib("ref-db.bib")
print(bib)
print(bib)
RefManageR::SearchBib(bib)
RefManageR::SearchBib(bib, "simrel")
bib %>%
SearchBib("simrel")
SearchBib(bib, "simrel")
SearchBib(bib, "saebo")
SearchBib(bib, "saebo2015simrel")
bib[[1]]
bib[[2]]
bib["simrel"]
bib[, "sirmel"]
bib[, "simrel"]
bib["saebo2015simrel"]
print(bib["saebo2015simrel"])
bib <- bibtex::read.bib("ref-db.bib")
bib["saebo2015simrel"]
bib["saebo2015simrel"]
library(RefManageR)
bib <- ReadBib("ref-db.bib")
bib["saebo2015simrel"]
capture.output(bib["saebo2015simrel"])
print(capture.output(bib["saebo2015simrel"]))
print(capture.output(bib["saebo2015simrel"]), sep = "/n")
paste(capture.output(bib["saebo2015simrel"]), sep = "/n")
cat(capture.output(bib["saebo2015simrel"]))
print(cat(capture.output(bib["saebo2015simrel"])))
print(capture.output(bib["saebo2015simrel"]))
paste(capture.output(bib["saebo2015simrel"]), collapse = "")
paste(capture.output(bib["saebo2015simrel"]), collapse = " ")
print(bib)
print(bib["saebo2015simrel"])
print(bib["saebo2015simrel"], .opts = list(style = "text"))
bib[["saebo2015simrel"]]
bib[["saebo2015simrel"]]$saebo2015simrel
bib["saebo2015simrel"]$saebo2015simrel
bib["saebo2015simrel"]
capture.output(bib["saebo2015simrel"])
capture.output(bib["saebo2015simrel"], split = " ")
?capture.output
capture.output(bib["saebo2015simrel"], split = FALSE)
capture.output(bib["saebo2015simrel"], split = FALSE, type 0 "message")
capture.output(bib["saebo2015simrel"], split = FALSE, type = "message")
bib["saebo2015simrel"]
substring(bib["saebo2015simrel"], 5)
substring(capture.output(bib["saebo2015simrel"]), 5)
substring(capture.output(bib["saebo2015simrel"], type = "message"), 5)
substring(capture.output(bib["saebo2015simrel"]), 5)
paste(substring(capture.output(bib["saebo2015simrel"]), 5), collapse = "")
