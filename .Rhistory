rmsep_df <- sim_obj %>%
select(-obj, -Train) %>%
left_join(fit) %>%
gather(Method, fit, PCR:PLS2) %>%
group_by(design, replicate, id, Method) %>%
transmute(
RMSEP = map2(fit, Test, get_rmsep_df)
) %>%
unnest(RMSEP) %>%
mutate(model = as.integer(str_replace_all(model, "[A-Za-z()]", "")),
model = ifelse(is.na(model), 0, model))
rmsep_df_nested <- rmsep_df %>%
ungroup() %>% nest(-design)
design_selected <- design %>%
select(eta, relpos, R2) %>%
rowwise() %>%
mutate_at(vars(relpos, R2), list2chr) %>%
ungroup() %>%
mutate(design = as.character(1:n()))
design_selected
rmsep_df
fullData <- rmsep_df_nested %>% left_join(design_selected) %>% unnest(data)
fullData
rmsep_plt <- ggplot(fullData %>% filter(estimate == "test"),
aes(model, RMSEP, color = Method, group = Method, fill = Method)) +
stat_summary(fun.y = mean, geom = "point", size = 1, shape = 21, color = "black") +
stat_summary(fun.y = mean, geom = "line") +
facet_grid(eta + relpos + R2 ~ response, scales = 'free_y', labeller = label_both) +
scale_x_continuous(breaks = 0:10) +
labs(x = "Components", y = "RMSEP") +
theme(legend.position = "top")
plot(rmsep_plt)
rmsep_plt
rmsep_plt <- ggplot(fullData %>% filter(estimate == "test"),
aes(model, RMSEP, color = Method, group = Method, fill = Method)) +
stat_summary(fun.y = mean, geom = "point", size = 1, shape = 21, color = "black") +
stat_summary(fun.y = mean, geom = "line") +
facet_grid(eta + relpos + R2 ~ response, scales = 'free_y', labeller = label_both) +
scale_x_continuous(breaks = 0:10) +
labs(x = "Components", y = "RMSEP") +
theme(legend.position = "top")
plot(rmsep_plt)
dta <- fullData %>% filter(estimate == "test") %>% spread(response, RMSEP) %>%
mutate_at(vars(eta, relpos, Method, model), as.factor)
mdl <- lm(cbind(Y1, Y2, Y3, Y4, Y5) ~ eta * relpos * model + Method, data = dta)
dta
mdl
dta
lme4::lmer(cbind(Y1, Y2, Y3, Y4, Y5) ~ eta * relpos * model + Method + (1 | id), data = dta)
lme4::lmer(cbind(Y1, Y2, Y3, Y4, Y5) ~ eta * relpos * model + Method + (1 | id), data = dta)
mixlm::lm(cbind(Y1, Y2, Y3, Y4, Y5) ~ eta * relpos * model + Method + r(id), data = dta)
mixlm::lm(as.matrix(cbind(Y1, Y2, Y3, Y4, Y5)) ~ eta * relpos * model + Method + r(id), data = dta)
mixlm::lm(cbind(Y1, Y2, Y3, Y4, Y5) ~ eta * relpos * model + Method, data = dta %>% filter(estimate == "test"))
mixlm::lm(cbind(Y1, Y2, Y3, Y4, Y5) ~ eta * relpos * model + Method + r(id), data = dta %>% filter(estimate == "test"))
dta
mixlm::lm(cbind(Y1, Y2, Y3, Y4, Y5) ~ eta * relpos * model + Method + r(replicate), data = dta %>% filter(estimate == "test"))
lme4::lmer(cbind(Y1, Y2, Y3, Y4, Y5) ~ eta * relpos * model + Method + (1 | replicate), data = dta %>% filter(estimate == "test"))
lme4::lmer(cbind(Y1, Y2, Y3, Y4, Y5) ~ eta * relpos * model + Method + (1 | id), data = dta %>% filter(estimate == "test"))
mld
mdl
plot(mdl)
plot(mdl, 1)
mdl[[1]]
plot(mdl[[1]])
plot(mdl[[1]], 1)
plot(mdl[[2]])
ls(mdl)
mdl[[1]]
names(mdl)
plot(mdl$effects)
mdl$effects
head(mdl$effects)
reshape2::melt(mdl$effects) %>% head()
reshape2::melt(mdl$effects, var.name = c("Variable", "Response"), value.name = "Effect") %>% head()
reshape2::melt(mdl$effects, variable.name = c("Variable", "Response"), value.name = "Effect") %>% head()
reshape2::melt(mdl$effects, varnames = c("Variable", "Response"), value.name = "Effect") %>% head()
reshape2::melt(mdl$effects, varnames = c("Variable", "Response"), value.name = "Effect") %>% head()
reshape2::melt(mdl$effects, varnames = c("Variable", "Response"), value.name = "Effect") %>%
ggplot(aes(Variable, Effect)) +
geom_point() + geom_line(group = 1) +
facet_grid(. ~ Response)
reshape2::melt(mdl$effects, varnames = c("Variable", "Response"), value.name = "Effect") %>%
ggplot(aes(Variable, Effect)) +
geom_point() + geom_line(group = 1) +
facet_grid(. ~ Response) +
coord_flip()
reshape2::melt(mdl$effects, varnames = c("Variable", "Response"), value.name = "Effect") %>%
filter(Variable != "(Intercept)") %>%
ggplot(aes(Variable, Effect)) +
geom_point() + geom_line(group = 1) +
facet_grid(. ~ Response) +
coord_flip()
reshape2::melt(mdl$effects, varnames = c("Variable", "Response"), value.name = "Effect") %>%
filter(Variable != "(Intercept)", Variable != "") %>%
ggplot(aes(Variable, Effect)) +
geom_point() + geom_line(group = 1) +
facet_grid(. ~ Response) +
coord_flip()
reshape2::melt(mdl$effects, varnames = c("Variable", "Response"), value.name = "Effect") %>%
filter(Variable != c("(Intercept)", "eta0.8"), Variable != "") %>%
ggplot(aes(Variable, Effect)) +
geom_point() + geom_line(group = 1) +
facet_grid(. ~ Response) +
coord_flip()
reshape2::melt(mdl$effects, varnames = c("Variable", "Response"), value.name = "Effect") %>%
filter(Variable != c("(Intercept)", "eta0.8"), Variable != "") %>%
ggplot(aes(Variable, Effect)) +
geom_point() + geom_line(group = 1) +
facet_grid(. ~ Response) +
coord_flip() +
geom_vline(xintercept = 0, color = "blue", linetype = 2)
reshape2::melt(mdl$effects, varnames = c("Variable", "Response"), value.name = "Effect") %>%
filter(Variable != c("(Intercept)", "eta0.8"), Variable != "") %>%
ggplot(aes(Variable, Effect)) +
geom_point() + geom_line(group = 1) +
facet_grid(. ~ Response) +
coord_flip() +
geom_hline(yintercept = 0, color = "blue", linetype = 2)
reshape2::melt(mdl$effects, varnames = c("Variable", "Response"), value.name = "Effect") %>%
filter(Variable != c("(Intercept)", "eta0.8"), Variable != "") %>%
ggplot(aes(Variable, Effect)) +
geom_point() + geom_line(group = 1) +
facet_grid(. ~ Response) +
coord_flip() +
geom_hline(yintercept = 0, color = "blue", linetype = 2, size = 1)
reshape2::melt(mdl$effects, varnames = c("Variable", "Response"), value.name = "Effect") %>%
filter(Variable != c("(Intercept)", "eta0.8"), Variable != "") %>%
ggplot(aes(Variable, Effect)) +
geom_point() + geom_line(group = 1) +
facet_grid(. ~ Response) +
coord_flip() +
geom_hline(yintercept = 0, color = "blue", linetype = 2, size = 0.5)
reshape2::melt(mdl$effects, varnames = c("Variable", "Response"), value.name = "Effect") %>%
filter(Variable != c("(Intercept)", "eta0.8"), Variable != "") %>%
ggplot(aes(Variable, Effect)) +
geom_point() + geom_line(group = 1) +
facet_grid(. ~ Response) +
coord_flip() +
geom_hline(yintercept = 0, color = "blue", linetype = 2, size = 0.3)
reshape2::melt(mdl$effects, varnames = c("Variable", "Response"), value.name = "Effect") %>%
filter(Variable != c("(Intercept)", "eta0.8"), Variable != "") %>%
ggplot(aes(Variable, Effect)) +
geom_hline(yintercept = 0, color = "blue", linetype = 2, size = 0.3) +
geom_point() + geom_line(group = 1) +
facet_grid(. ~ Response) +
coord_flip()
reshape2::melt(mdl$effects, varnames = c("Variable", "Response"), value.name = "Effect") %>%
filter(Variable != c("(Intercept)", "eta0.8"), Variable != "") %>%
ggplot(aes(Variable, Effect)) +
geom_hline(yintercept = 0, color = "blue", linetype = 3, size = 0.3) +
geom_point() + geom_line(group = 1) +
facet_grid(. ~ Response) +
coord_flip()
reshape2::melt(mdl$effects, varnames = c("Variable", "Response"), value.name = "Effect") %>%
filter(Variable != c("(Intercept)", "eta0.8"), Variable != "") %>%
ggplot(aes(Variable, Effect)) +
geom_hline(yintercept = 0, color = "blue", linetype = 4, size = 0.3) +
geom_point() + geom_line(group = 1) +
facet_grid(. ~ Response) +
coord_flip()
reshape2::melt(mdl$effects, varnames = c("Variable", "Response"), value.name = "Effect") %>%
filter(Variable != c("(Intercept)", "eta0.8"), Variable != "") %>%
ggplot(aes(Variable, Effect)) +
geom_hline(yintercept = 0, color = "blue", size = 0.3) +
geom_point() + geom_line(group = 1) +
facet_grid(. ~ Response) +
coord_flip()
ls()
opts
as_data_frame(opts)
as_data_frame(opts) %>%
mutate_at("relpos", map_chr, list2chr)
as_data_frame(opts) %>%
mutate_at("relpos", map_chr, list2chr) %>%
knitr::kable
as_data_frame(opts) %>%
mutate_at("relpos", map_chr, list2chr) %>%
knitr::kable()
as_data_frame(opts) %>%
mutate_at("relpos", map_chr, list2chr) %>%
knitr::kable(caption = "Parameter setting for simulation in second example")
design
design %>%
select(-type, -ntest)
design %>%
select(-type, -ntest) %>%
mutate_if(is_list, map_chr, list2chr)
design %>%
select(-type, -ntest) %>%
mutate_if(is_list, map_chr, list2chr) %>%
knitr::kable(caption = "Parameter setting for simulation in second example") %>%
kableExtra::row_spec(1, monospace = TRUE, bold = TRUE) %>%
kableExtra::row_spec(2:nrow(.), monospace = TRUE)
design %>%
select(-type, -ntest) %>%
mutate_if(is_list, map_chr, list2chr) %>%
knitr::kable(caption = "Parameter setting for simulation in second example") %>%
kableExtra::row_spec(1, monospace = TRUE, bold = TRUE) %>%
kableExtra::row_spec(2:5, monospace = TRUE)
knitr::opts_chunk$set(
echo = FALSE,
message = FALSE,
error = FALSE,
eval = FALSE
)
mtcars %>%
knitr::kable(caption = "Parameter setting for simulation in second example") %>%
kableExtra::row_spec(1, monospace = TRUE, bold = TRUE)
?kable
?htmltools::tags$style
?htmltools::tags
htmltools::tags$style(
"body{width: 900px; margin: 0px auto;}"
)
dta
dta <- data_frame(
obj_file = c("design.Rdata", "sim-obj.Rdata",
"fit.Rdata", "coef.Rdata", "true-value.Rdata",
"pred-error.Rdata", "final-data.Rdata"),
source_file = c("01-setup.r", "02-simulation.r",
"03-model-fitting.r", "04-get-coefficients.r",
"05-true-values.r", "06-prediction-error.r",
"07-final-data.r")
)
dta <- dta %>%
mutate(obj_file = paste0("scripts/example2/output/", obj_file),
source_file = paste0("scripts/example2/", source_file))
dta
dta %>% slice(1, 2, 3)
dta %>% slice(c(1,2 ,3 ))
rmsep_df <- sim_obj %>%
select(-obj, -Train) %>%
left_join(fit) %>%
gather(Method, fit, PCR:PLS2) %>%
group_by(design, replicate, id, Method) %>%
transmute(
RMSEP = map2(fit, Test, get_rmsep_df)
) %>%
unnest(RMSEP) %>%
mutate(model = as.integer(str_replace_all(model, "[A-Za-z()]", "")),
model = ifelse(is.na(model), 0, model))
rmsep_df
myData
predErr
predErr
predErr <- map_df(`names<-`(mdls, mdls), function(mdl){
coef %>%
group_by(design, replicate, id) %>%
select_(mdl = mdl) %>%
left_join(trueValue) %>%
do(with(., pmap_df(list(mdl, minerror, trueBeta, sigma), getIndivPredErr)))
}, .id = "Model")
rmsep_df <- sim_obj %>%
select(-obj, -Train) %>%
left_join(fit) %>%
gather(Method, fit, PCR:PLS2) %>%
group_by(design, replicate, id, Method) %>%
transmute(
RMSEP = map2(fit, Test, get_rmsep_df)
) %>%
unnest(RMSEP) %>%
mutate(model = as.integer(str_replace_all(model, "[A-Za-z()]", "")),
model = ifelse(is.na(model), 0, model))
save(predErr, rmsep_df, file = "scripts/example2/output/pred-error.Rdata")
predErr
rmsep_df
names(rmsep_df) <- c("design", "replicate", "id", "Model", "ErrorType", "Response", "comp", "RMSEP")
rmsep_df
source('~/Dropbox/Papers/01-simrel-m/scripts/example2/06-prediction-error.r')
rmsep_df %>%
ungroup() %>%
nest(-design) %>%
left_join(
design %>%
mutate(design = as.character(1:n())),
by = "design"
) %>%
select(-n:-q) %>%
mutate(relpos = as.character(relpos),
R2 = as.character(R2)) %>%
unnest(data)
rmsep_df %>%
ungroup() %>%
nest(-design) %>%
left_join(
design %>%
mutate(design = as.character(1:n())),
by = "design"
) %>%
select(-n:-q) %>%
mutate(relpos = map_chr(relpos, list2chr),
R2 = map_chr(R2, list2chr)) %>%
unnest(data)
myData
dta <- data_frame(
obj_file = c("design.Rdata", "sim-obj.Rdata",
"fit.Rdata", "coef.Rdata", "true-value.Rdata",
"pred-error.Rdata", "final-data.Rdata"),
source_file = c("01-setup.r", "02-simulation.r",
"03-model-fitting.r", "04-get-coefficients.r",
"05-true-values.r", "06-prediction-error.r",
"07-final-data.r")
)
dta <- dta %>%
mutate(obj_file = paste0("scripts/example2/output/", obj_file),
source_file = paste0("scripts/example2/", source_file))
# pwalk(dta, source_if_not)
pwalk(dta[c(1, 7), ], source_if_not)
myData
rmsep_df %>%
ungroup() %>%
nest(-design) %>%
left_join(
design %>%
mutate(design = as.character(1:n())),
by = "design"
) %>%
select(-n:-q) %>%
mutate(relpos = map_chr(relpos, list2chr),
R2 = map_chr(R2, list2chr)) %>%
unnest(data)
source('~/Dropbox/Papers/01-simrel-m/scripts/example2/07-final-data.r')
myData
ls()
source('~/Dropbox/Papers/01-simrel-m/scripts/example2/01-setup.r')
source('~/Dropbox/Papers/01-simrel-m/scripts/example2/02-simulation.r')
source('~/Dropbox/Papers/01-simrel-m/scripts/example2/03-model-fitting.r')
source('~/Dropbox/Papers/01-simrel-m/scripts/example2/04-get-coefficients.r')
source("scripts/00-function.r")
source('~/Dropbox/Papers/01-simrel-m/scripts/example2/04-get-coefficients.r')
source('~/Dropbox/Papers/01-simrel-m/scripts/example2/07-final-data.r')
source('~/Dropbox/Papers/01-simrel-m/scripts/example2/05-true-values.r')
source('~/Dropbox/Papers/01-simrel-m/scripts/example2/06-prediction-error.r')
source('~/Dropbox/Papers/01-simrel-m/scripts/example2/07-final-data.r')
knitr::opts_chunk$set(
echo = FALSE,
message = FALSE,
error = FALSE,
fig.retina = 2,
out.width = "100%"
)
rmsep_plt <- ggplot(myData %>% filter(ErrorType == "test", R2 == "0.8"),
aes(comp, RMSEP, color = Model, group = Model, fill = Model)) +
stat_summary(fun.y = mean, geom = "point", size = 1, shape = 21, color = "black") +
stat_summary(fun.y = mean, geom = "line") +
facet_grid(eta + relpos + R2 ~ Response, scales = 'free_y', labeller = label_both) +
scale_x_continuous(breaks = seq(0, 10, 2)) +
labs(x = "Components", y = "RMSEP") +
theme(legend.position = "top")
plot(rmsep_plt)
rmsep_plt
rmsep_plt <- ggplot(myData %>% filter(ErrorType == "test", R2 != "0.8"),
aes(comp, RMSEP, color = Model, group = Model, fill = Model)) +
stat_summary(fun.y = mean, geom = "point", size = 1, shape = 21, color = "black") +
stat_summary(fun.y = mean, geom = "line") +
facet_grid(eta + relpos + R2 ~ Response, scales = 'free_y', labeller = label_both) +
scale_x_continuous(breaks = seq(0, 10, 2)) +
labs(x = "Components", y = "RMSEP") +
theme(legend.position = "top")
theme(legend.position = "top")
rmsep_plt
plt_dta_1 <- myData %>% filter(ErrorType == "test", R2 != "0.8")
rmsep_plt <- function(data){
ggplot(data,
aes(comp, RMSEP, color = Model, group = Model, fill = Model)) +
stat_summary(fun.y = mean, geom = "point", size = 1, shape = 21, color = "black") +
stat_summary(fun.y = mean, geom = "line") +
facet_grid(eta + relpos + R2 ~ Response, scales = 'free_y', labeller = label_both) +
scale_x_continuous(breaks = seq(0, 10, 2)) +
labs(x = "Components", y = "RMSEP") +
theme(legend.position = "top")
}
rmsep_plt(plt_dta_1)
```{r rmsep_plot, fig.asp=0.5, retina = 2}
plt_dta_1 <- myData %>% filter(ErrorType == "test", R2 != "0.8")
rmsep_plt <- function(data){
ggplot(data,
aes(comp, RMSEP, color = Model, group = Model, fill = Model)) +
stat_summary(fun.y = mean, geom = "point", size = 1, shape = 21, color = "black") +
stat_summary(fun.y = mean, geom = "line") +
facet_grid(eta + relpos + R2 ~ Response, scales = 'free_y', labeller = label_both) +
scale_x_continuous(breaks = seq(0, 10, 2)) +
labs(x = "Components", y = "RMSEP") +
theme(legend.position = "top")
}
rmsep_plt(plt_dta_1)
rmsep_plt(plt_dta_2)
plt_dta_2 <- myData %>% filter(ErrorType == "test", R2 == "0.8")
rmsep_plt(plt_dta_2)
rmsep_plt(plt_dta_2)
source("scripts/example2/01-setup.r")
## ----Simulation, results='hide'------------------------------------------
library(parallel)
source('~/Dropbox/Papers/01-simrel-m/scripts/example2/02-simulation.r')
out
bind_rows(.id = "replicate", .id = "replicate")
bind_rows(out.id = "replicate")
bind_rows(out, .id = "replicate")
?gc
source('~/Dropbox/Papers/01-simrel-m/scripts/example2/01-setup.r')
source('~/Dropbox/Papers/01-simrel-m/scripts/example2/02-simulation.r')
sim_obj
sim_obj_list
source('~/Dropbox/Papers/01-simrel-m/scripts/example2/02-simulation.r')
sim_obj_list
source('~/Dropbox/Papers/01-simrel-m/scripts/example2/02-simulation.r')
sim_obj
save(sim_obj, file = "scripts/example2/output/sim-obj.Rdata")
source('~/Dropbox/Papers/01-simrel-m/scripts/example2/03-model-fitting.r')
fit
source('~/Dropbox/Papers/01-simrel-m/scripts/example2/04-get-coefficients.r')
source("scripts/00-function.r")
source('~/Dropbox/Papers/01-simrel-m/scripts/example2/04-get-coefficients.r')
source('~/Dropbox/Papers/01-simrel-m/scripts/example2/05-true-values.r')
source('~/Dropbox/Papers/01-simrel-m/scripts/example2/06-prediction-error.r')
source('~/Dropbox/Papers/01-simrel-m/scripts/example2/07-final-data.r')
myData
knitr::opts_chunk$set(
echo = FALSE,
message = FALSE,
error = FALSE,
fig.retina = 2,
out.width = "100%"
)
plt_dta_1 <- myData %>%
filter(ErrorType == "test",  R2 != "0.8",  Model != "PCR")
rmsep_plt <- function(data){
ggplot(data,
aes(comp, RMSEP, color = Model,
group = Model, fill = Model)) +
stat_summary(fun.y = mean, geom = "line") +
stat_summary(fun.y = mean, geom = "point",
size = 1, shape = 21, color = "black", stroke = 0.2) +
facet_grid(design + eta + relpos + R2 ~ Response,
scales = 'free_y', labeller = label_both) +
scale_x_continuous(breaks = seq(0, 10, 2)) +
labs(x = "Components", y = "RMSEP") +
theme(legend.position = "top")
}
rmsep_plt(plt_dta_1)
plt_dta_2 <- myData %>%
filter(ErrorType == "test", R2 == "0.8", Model != "PCR")
rmsep_plt(plt_dta_2)
file.remove("main.Rmd")
rmsep_plt <- function(data){
ggplot(data,
aes(comp, RMSEP, color = Model,
group = Model, fill = Model)) +
stat_summary(fun.y = mean, geom = "line") +
stat_summary(fun.y = mean, geom = "point",
size = 1, shape = 21, color = "black", stroke = 0.2) +
facet_grid(design + eta + relpos + R2 ~ Response,
scales = 'free_y', labeller = label_both) +
scale_x_continuous(breaks = seq(0, 10, 2)) +
labs(x = "Components", y = "RMSEP") +
theme(legend.position = "top")
}
myData %>%
filter(ErrorType == "test",  Model != "PCR") %>%
rmsep_plt()
file.remove("main.Rmd")
file.remove("main.Rmd")
plt <- myData %>%
filter(ErrorType == "test",  Model != "PCR") %>%
rmsep_plt()
plot(plt)
rmsep_plt <- function(data){
ggplot(data,
aes(comp, RMSEP, color = Model,
group = Model, fill = Model)) +
stat_summary(fun.y = mean, geom = "line") +
stat_summary(fun.y = mean, geom = "point",
size = 1, shape = 21, color = "black", stroke = 0.2) +
facet_grid(design + eta + relpos + R2 ~ Response,
scales = 'free_y', labeller = label_both) +
scale_x_continuous(breaks = seq(0, 10, 2)) +
labs(x = "Components", y = "RMSEP") +
theme(legend.position = "top")
}
plt_dt <- myData %>%
filter(ErrorType == "test",  Model != "PCR")
rmsep_plt(plt_dt)
file.remove("main.Rmd")
# rmsep_plt <- function(data){
#   ggplot(data,
#          aes(comp, RMSEP, color = Model,
#              group = Model, fill = Model)) +
#   stat_summary(fun.y = mean, geom = "line") +
#   stat_summary(fun.y = mean, geom = "point",
#                size = 1, shape = 21, color = "black", stroke = 0.2) +
#   facet_grid(design + eta + relpos + R2 ~ Response,
#              scales = 'free_y', labeller = label_both) +
#   scale_x_continuous(breaks = seq(0, 10, 2)) +
#   labs(x = "Components", y = "RMSEP") +
#   theme(legend.position = "top")
# }
plt_dt <- myData %>%
filter(ErrorType == "test",  Model != "PCR") %>%
ggplot(data,
aes(comp, RMSEP, color = Model,
group = Model, fill = Model)) +
stat_summary(fun.y = mean, geom = "line") +
stat_summary(fun.y = mean, geom = "point",
size = 1, shape = 21, color = "black", stroke = 0.2) +
facet_grid(design + eta + relpos + R2 ~ Response,
scales = 'free_y', labeller = label_both) +
scale_x_continuous(breaks = seq(0, 10, 2)) +
labs(x = "Components", y = "RMSEP") +
theme(legend.position = "top")
file.remove("main.Rmd")
file.remove("main.Rmd")
q("no")
