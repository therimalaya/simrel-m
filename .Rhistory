source("08-final-data.r")
} else {
load('output/pred-err.rdata')
setwd(owd)
}
# Chunk 2: design-table
design_table <- do.call(rbind, opts[c("gamma", "R2")])
dimnames(design_table) <- list(
c("Decay of eigenvalue $(\\gamma)$",
"Coef. of Determination $(\\rho^2)$"),
paste0("Design", 1:4))
# Chunk 3: design-table-print
pander::pander(
design_table, type = "rmarkdown",
split.cells = c(40, rep(30, 4)), split.tables = Inf,
justify = paste(rep("r", ncol(design_table) + 1), collapse = ""),
caption = "(\\#tab:parameter-settings) Parameter setting of simulated data for model comparison"
)
# Chunk 4: Average-Prediction
avg_pred_err <- myData %>%
group_by(Model, design, comp, R2, gamma) %>%
do(mean_se(.$pred_err)) %>%
rename(pred_err = y, upper = ymax, lower = ymin)
# Chunk 5: minimum-average-prediction
avgPredErr <- avg_pred_err %>%
group_by(Model, design) %>%
summarise(
comp = comp[which.min(pred_err)],
pred_err = min(pred_err),
label = paste0("(", comp, ", ", round(pred_err, 2), ")")
)
avgPredErr_lbl <- avgPredErr %>%
select(-comp, -pred_err) %>%
mutate(design = paste0("Design: ", design)) %>%
spread(design, label)
avgPredErr_idx <- avgPredErr %>%
select(-comp, -label) %>%
mutate(design = paste0("Design: ", design)) %>%
spread(design, pred_err) %>%
ungroup() %>%
select(-Model) %>%
do({sapply(., function(x) x == min(x)) %>% as_tibble()}) %>%
as.matrix() %>%
which(arr.ind = TRUE)
avgPredErr_idx[, "col"] <- avgPredErr_idx[, "col"] + 1
avgPredErr_lbl %>%
pander(emphasize.strong.cells = avgPredErr_idx,
# emphasize.verbatim.cols = 2:ncol(.),
emphasize.italics.cells = avgPredErr_idx,
emphasize.italics.cols = 1,
split.cells = Inf, justify = "lcccc",
caption = "(\\#tab:min-error) Minimum average prediction error (number of components, prediction error)")
# Chunk 6
topBest <- avgPredErr %>%
ungroup() %>%
group_by(design) %>%
summarize(
Model = Model[which.min(pred_err)],
pred_err = min(pred_err)
)
# Chunk 7: Average-Prediction-Plot
plot_label <- avg_pred_err %>%
ungroup() %>%
select(R2, gamma, design) %>%
unique() %>%
transmute(
design = unique(design),
Model = NA,
x = Inf, y = c(Inf, Inf, -Inf, -Inf),
label = paste0("R2: ", R2, "\ngamma: ", gamma),
type = "Properties",
v = c(1.2, 1.2, -1.2, -1)
)
plt <- avg_pred_err %>%
filter(Model != "OLS") %>%
mutate(type = "Plot") %>%
ggplot(aes(comp, pred_err, fill = Model)) +
geom_ribbon(aes(ymax = upper, ymin = lower), alpha = 0.1) +
geom_line(aes(color = Model), size = 0.5) +
geom_point(shape = 21, size = 1, aes(color = Model)) +
geom_hline(data = avg_pred_err %>%
filter(Model == "OLS", comp == 1),
aes(yintercept = pred_err, color = Model),
linetype = 2, size = 0.5) +
geom_point(data = avg_pred_err %>%
filter(Model == "OLS", comp == 1),
aes(y = pred_err, color = Model), size = 1) +
geom_text(aes(label = label, x = Inf, y = y, vjust = v),
data = plot_label,
hjust = 1, family = "mono", size = rel(4)) +
scale_size_continuous(range = c(0.1, 2), breaks = NULL) +
scale_fill_discrete(l = 40) +
labs(x = "Number of Components",
y = expression(paste('Prediction Error (||', alpha, '||'[F], ")"))) +
facet_wrap( ~ design, labeller = label_both) +
theme_gray(base_size = 14) +
theme(legend.position = "bottom") +
scale_x_continuous(breaks = seq(0, 10, 1)) +
ggtitle("Prediction Error",
sub = "Averaged over 20 replicated Datasets of same properties") +
guides(color = guide_legend(nrow = 1),
fill = guide_legend(nrow = 1))
plot(plt)
# Chunk 1: KnitrSetup
knitr::opts_chunk$set(
comment = NA,
message = FALSE,
warning = FALSE,
echo    = FALSE,
fig.pos = 'H'
)
evl <- !file.exists('scripts/output/pred-err.rdata')
source("scripts/01-setup.r")
if (evl) {
source("08-final-data.r")
} else {
load('output/pred-err.rdata')
setwd(owd)
}
# Chunk 2: design-table
design_table <- do.call(rbind, opts[c("gamma", "R2")])
dimnames(design_table) <- list(
c("Decay of eigenvalue $(\\gamma)$",
"Coef. of Determination $(\\rho^2)$"),
paste0("Design", 1:4))
# Chunk 3: design-table-print
pander::pander(
design_table, type = "rmarkdown",
split.cells = c(40, rep(30, 4)), split.tables = Inf,
justify = paste(rep("r", ncol(design_table) + 1), collapse = ""),
caption = "(\\#tab:parameter-settings) Parameter setting of simulated data for model comparison"
)
# Chunk 4: Average-Prediction
avg_pred_err <- myData %>%
group_by(Model, design, comp, R2, gamma) %>%
do(mean_se(.$pred_err)) %>%
rename(pred_err = y, upper = ymax, lower = ymin)
# Chunk 5: minimum-average-prediction
avgPredErr <- avg_pred_err %>%
group_by(Model, design) %>%
summarise(
comp = comp[which.min(pred_err)],
pred_err = min(pred_err),
label = paste0("(", comp, ", ", round(pred_err, 2), ")")
)
avgPredErr_lbl <- avgPredErr %>%
select(-comp, -pred_err) %>%
mutate(design = paste0("Design: ", design)) %>%
spread(design, label)
avgPredErr_idx <- avgPredErr %>%
select(-comp, -label) %>%
mutate(design = paste0("Design: ", design)) %>%
spread(design, pred_err) %>%
ungroup() %>%
select(-Model) %>%
do({sapply(., function(x) x == min(x)) %>% as_tibble()}) %>%
as.matrix() %>%
which(arr.ind = TRUE)
avgPredErr_idx[, "col"] <- avgPredErr_idx[, "col"] + 1
avgPredErr_lbl %>%
pander(emphasize.strong.cells = avgPredErr_idx,
# emphasize.verbatim.cols = 2:ncol(.),
emphasize.italics.cells = avgPredErr_idx,
emphasize.italics.cols = 1,
split.cells = Inf, justify = "lcccc",
caption = "(\\#tab:min-error) Minimum average prediction error (number of components, prediction error)")
# Chunk 6
topBest <- avgPredErr %>%
ungroup() %>%
group_by(design) %>%
summarize(
Model = Model[which.min(pred_err)],
pred_err = min(pred_err)
)
# Chunk 7: Average-Prediction-Plot
plot_label <- avg_pred_err %>%
ungroup() %>%
select(R2, gamma, design) %>%
unique() %>%
transmute(
design = unique(design),
Model = NA,
x = Inf, y = c(Inf, Inf, -Inf, -Inf),
label = paste0("R2: ", R2, "\ngamma: ", gamma),
type = "Properties",
v = c(1.2, 1.2, -1.2, -1)
)
plt <- avg_pred_err %>%
filter(Model != "OLS") %>%
mutate(type = "Plot") %>%
ggplot(aes(comp, pred_err, fill = Model)) +
geom_ribbon(aes(ymax = upper, ymin = lower), alpha = 0.1) +
geom_line(aes(color = Model), size = 0.5) +
geom_point(shape = 21, size = 1, aes(color = Model)) +
geom_hline(data = avg_pred_err %>%
filter(Model == "OLS", comp == 1),
aes(yintercept = pred_err, color = Model),
linetype = 2, size = 0.5) +
geom_point(data = avg_pred_err %>%
filter(Model == "OLS", comp == 1),
aes(y = pred_err, color = Model), size = 1) +
geom_text(aes(label = label, x = Inf, y = y, vjust = v),
data = plot_label,
hjust = 1, family = "mono", size = rel(4)) +
scale_size_continuous(range = c(0.1, 2), breaks = NULL) +
scale_fill_discrete(l = 40) +
labs(x = "Number of Components",
y = expression(paste('Prediction Error (||', alpha, '||'[F], ")"))) +
facet_wrap( ~ design, labeller = label_both) +
theme_gray(base_size = 14) +
theme(legend.position = "bottom") +
scale_x_continuous(breaks = seq(0, 10, 1)) +
ggtitle("Prediction Error",
sub = "Averaged over 20 replicated Datasets of same properties") +
guides(color = guide_legend(nrow = 1),
fill = guide_legend(nrow = 1))
plot(plt)
avgPredErr <- avg_pred_err %>%
group_by(Model, design) %>%
summarise(
comp = comp[which.min(pred_err)],
pred_err = min(pred_err),
label = paste0("(", comp, ", ", round(pred_err, 2), ")")
)
avgPredErr_lbl <- avgPredErr %>%
select(-comp, -pred_err) %>%
mutate(design = paste0("Design: ", design)) %>%
spread(design, label)
avgPredErr_idx <- avgPredErr %>%
select(-comp, -label) %>%
mutate(design = paste0("Design: ", design)) %>%
spread(design, pred_err) %>%
ungroup() %>%
select(-Model) %>%
do({sapply(., function(x) x == min(x)) %>% as_tibble()}) %>%
as.matrix() %>%
which(arr.ind = TRUE)
avgPredErr_idx[, "col"] <- avgPredErr_idx[, "col"] + 1
avgPredErr_lbl %>%
pander(emphasize.strong.cells = avgPredErr_idx,
# emphasize.verbatim.cols = 2:ncol(.),
emphasize.italics.cells = avgPredErr_idx,
emphasize.italics.cols = 1,
split.cells = Inf, justify = "lcccc",
caption = "(\\#tab:min-error) Minimum average prediction error (number of components, prediction error)")
avgPredErr <- avg_pred_err %>%
group_by(Model, design) %>%
summarise(
comp = comp[which.min(pred_err)],
pred_err = min(pred_err),
label = paste0("(", comp, ", ", round(pred_err, 2), ")")
)
avgPredErr_lbl <- avgPredErr %>%
select(-comp, -pred_err) %>%
mutate(design = paste0("Design: ", design)) %>%
spread(design, label)
avgPredErr_idx <- avgPredErr %>%
select(-comp, -label) %>%
mutate(design = paste0("Design: ", design)) %>%
spread(design, pred_err) %>%
ungroup() %>%
select(-Model) %>%
do({sapply(., function(x) x == min(x)) %>% as_tibble()}) %>%
as.matrix() %>%
which(arr.ind = TRUE)
avgPredErr_idx[, "col"] <- avgPredErr_idx[, "col"] + 1
avgPredErr_lbl %>%
pander(emphasize.strong.cells = avgPredErr_idx,
# emphasize.verbatim.cols = 2:ncol(.),
emphasize.italics.cells = avgPredErr_idx,
emphasize.italics.cols = 1,
split.cells = Inf, justify = "lcccc",
caption = "(\\#tab:min-error) Minimum average prediction error (number of components, prediction error)")
avgPredErr <- avg_pred_err %>%
group_by(Model, design) %>%
summarise(
comp = comp[which.min(pred_err)],
pred_err = min(pred_err),
label = paste0("(", comp, ", ", round(pred_err, 2), ")")
)
avgPredErr_lbl <- avgPredErr %>%
select(-comp, -pred_err) %>%
mutate(design = paste0("Design: ", design)) %>%
spread(design, label)
avgPredErr_idx <- avgPredErr %>%
select(-comp, -label) %>%
mutate(design = paste0("Design: ", design)) %>%
spread(design, pred_err) %>%
ungroup() %>%
select(-Model) %>%
do({sapply(., function(x) x == min(x)) %>% as_tibble()}) %>%
as.matrix() %>%
which(arr.ind = TRUE)
avgPredErr_idx[, "col"] <- avgPredErr_idx[, "col"] + 1
avgPredErr_lbl %>%
pander(emphasize.strong.cells = avgPredErr_idx,
# emphasize.verbatim.cols = 2:ncol(.),
emphasize.italics.cells = avgPredErr_idx,
emphasize.italics.cols = 1,
split.cells = Inf, justify = "lcccc",
caption = "(\\#tab:min-error) Minimum average prediction error (number of components, prediction error)")
avgPredErr_lbl %>%
pander(emphasize.strong.cells = avgPredErr_idx,
emphasize.verbatim.cols = 2:ncol(.),
emphasize.italics.cells = avgPredErr_idx,
emphasize.italics.cols = 1,
split.cells = Inf, justify = "lcccc",
caption = "(\\#tab:min-error) Minimum average prediction error (number of components, prediction error)")
avgPredErr_lbl %>%
pander(emphasize.strong.cells = avgPredErr_idx,
emphasize.verbatim.cols = 2:ncol(.),
emphasize.italics.cells = avgPredErr_idx,
emphasize.italics.cols = 1)
pander(avgPredErr_lbl, emphasize.strong.cells = avgPredErr_idx,
emphasize.verbatim.cols = 2:ncol(.),
emphasize.italics.cells = avgPredErr_idx,
emphasize.italics.cols = 1)
pander(avgPredErr_lbl)
avgPredErr_lbl
avgPredErr_idx
pander(avgPredErr_lbl)
pander(as.factor(avgPredErr_lbl))
pander(as.data.frame(avgPredErr_lbl))
avgPredErr_lbl %>%
as_tibble() %>%
pander(emphasize.strong.cells = avgPredErr_idx,
emphasize.verbatim.cols = 2:ncol(.),
emphasize.italics.cells = avgPredErr_idx,
emphasize.italics.cols = 1,
split.cells = Inf, justify = "lcccc",
caption = "(\\#tab:min-error) Minimum average prediction error (number of components, prediction error)")
as_tibble(avgPredErr_lbl)
pander(as_tibble(avgPredErr_lbl))
pander(avgPredErr_lbl %>% ungroup())
avgPredErr_lbl %>%
as.data.frame() %>%
pander(emphasize.strong.cells = avgPredErr_idx,
emphasize.verbatim.cols = 2:ncol(.),
emphasize.italics.cells = avgPredErr_idx,
emphasize.italics.cols = 1,
split.cells = Inf, justify = "lcccc",
caption = "(\\#tab:min-error) Minimum average prediction error (number of components, prediction error)")
rstudioapi::viewer("http://localhost::3000")
rstudioapi::viewer()
rstudioapi::viewer(url = "http://localhost:3000/")
plt1 <- plot(cov.df(sim.obj, type = "relpos", ordering = TRUE), "relpos") +
ggtitle("PC Covariance Matrix")
plt2 <- plot(cov.df(sim.obj, type = "rotation"), "relpred") +
ggtitle("Rotation Matrix")
plt3 <- plot(cov.df(sim.obj, type = "relpred"), "relpred") +
ggtitle("simulated data cov. matrix")
plusTheme <- theme(text = element_text(size = 12),
legend.title = element_blank(),
legend.position = "top",
plot.title = element_blank())
plt1 + plusTheme
plt2 + plusTheme
plt3 + plusTheme
plt1 <- plot(cov.df(sim.obj, type = "relpos", ordering = TRUE), "relpos") +
ggtitle("PC Covariance Matrix")
plt2 <- plot(cov.df(sim.obj, type = "rotation"), "relpred") +
ggtitle("Rotation Matrix")
plt3 <- plot(cov.df(sim.obj, type = "relpred"), "relpred") +
ggtitle("simulated data cov. matrix")
plusTheme <- theme(text = element_text(size = 12),
legend.title = element_blank(),
legend.position = "top",
plot.title = element_blank())
plt1 + plusTheme
plt2 + plusTheme
plt3 + plusTheme
source("05-get-coefficients.r")
source("scripts/01-setup.r")
source("05-get-coefficients.r")
source("06-true-values.r")
predErr <- map_df(`names<-`(mdls, mdls), function(mdl){
coef %>%
group_by(design, replicate, id) %>%
select_(mdl = mdl) %>%
left_join(trueValue) %>%
do(with(., pmap_df(list(mdl, minerror, trueBeta, sigma), getPredErr)))
}, .id = "Model")
predErr
myData <- do.call(tibble, opts) %>%
mutate(design = as.character(1:n())) %>%
right_join(predErr, by = "design") %>%
mutate_if(is.character, as.factor) %>%
mutate_at("gamma", as.factor)
save(myData, file = "output/pred-err.Rdata")
myData
save(sim_obj, trueValue, fit, myData, senv, file = "output/unsync/all-in-one.rdata")
myData
knitr::opts_chunk$set(
comment = NA,
message = FALSE,
warning = FALSE,
echo    = FALSE,
fig.pos = 'H'
)
evl <- !file.exists('scripts/output/pred-err.rdata')
source("scripts/01-setup.r")
if (evl) {
source("08-final-data.r")
} else {
load('output/pred-err.rdata')
setwd(owd)
}
load('output/pred-err.rdata')
design_table <- do.call(rbind, opts[c("gamma", "R2")])
dimnames(design_table) <- list(
c("Decay of eigenvalue $(\\gamma)$",
"Coef. of Determination $(\\rho^2)$"),
paste0("Design", 1:4))
design_table
pander::pander(
design_table, type = "rmarkdown",
split.cells = c(40, rep(30, 4)), split.tables = Inf,
justify = paste(rep("r", ncol(design_table) + 1), collapse = ""),
caption = "(\\#tab:parameter-settings) Parameter setting of simulated data for model comparison"
)
avg_pred_err <- myData %>%
group_by(Model, design, comp, R2, gamma) %>%
do(mean_se(.$pred_err)) %>%
rename(pred_err = y, upper = ymax, lower = ymin)
rm(list = ls())
load('output/pred-err.rdata')
ls()
myData
avg_pred_err <- myData %>%
rename(pred_err = without_norm) %>%
group_by(Model, design, comp, R2, gamma) %>%
do(mean_se(.$pred_err)) %>%
rename(pred_err = y, upper = ymax, lower = ymin)
avg_pred_err
avgPredErr <- avg_pred_err %>%
group_by(Model, design) %>%
summarise(
comp = comp[which.min(pred_err)],
pred_err = min(pred_err),
label = paste0("(", comp, ", ", round(pred_err, 2), ")")
)
avgPredErr_lbl <- avgPredErr %>%
select(-comp, -pred_err) %>%
mutate(design = paste0("Design: ", design)) %>%
spread(design, label)
avgPredErr_idx <- avgPredErr %>%
select(-comp, -label) %>%
mutate(design = paste0("Design: ", design)) %>%
spread(design, pred_err) %>%
ungroup() %>%
select(-Model) %>%
do({sapply(., function(x) x == min(x)) %>% as_tibble()}) %>%
as.matrix() %>%
which(arr.ind = TRUE)
avgPredErr_idx[, "col"] <- avgPredErr_idx[, "col"] + 1
avgPredErr_lbl %>%
as.data.frame() %>%
pander(emphasize.strong.cells = avgPredErr_idx,
emphasize.verbatim.cols = 2:ncol(.),
emphasize.italics.cells = avgPredErr_idx,
emphasize.italics.cols = 1,
split.cells = Inf, justify = "lcccc",
caption = "(\\#tab:min-error) Minimum average prediction error (number of components, prediction error)")
topBest <- avgPredErr %>%
ungroup() %>%
group_by(design) %>%
summarize(
Model = Model[which.min(pred_err)],
pred_err = min(pred_err)
)
plot_label <- avg_pred_err %>%
ungroup() %>%
select(R2, gamma, design) %>%
unique() %>%
transmute(
design = unique(design),
Model = NA,
x = Inf, y = c(Inf, Inf, -Inf, -Inf),
label = paste0("R2: ", R2, "\ngamma: ", gamma),
type = "Properties",
v = c(1.2, 1.2, -1.2, -1)
)
plt <- avg_pred_err %>%
filter(Model != "OLS") %>%
mutate(type = "Plot") %>%
ggplot(aes(comp, pred_err, fill = Model)) +
geom_ribbon(aes(ymax = upper, ymin = lower), alpha = 0.1) +
geom_line(aes(color = Model), size = 0.5) +
geom_point(shape = 21, size = 1, aes(color = Model)) +
geom_hline(data = avg_pred_err %>%
filter(Model == "OLS", comp == 1),
aes(yintercept = pred_err, color = Model),
linetype = 2, size = 0.5) +
geom_point(data = avg_pred_err %>%
filter(Model == "OLS", comp == 1),
aes(y = pred_err, color = Model), size = 1) +
geom_text(aes(label = label, x = Inf, y = y, vjust = v),
data = plot_label,
hjust = 1, family = "mono", size = rel(4)) +
scale_size_continuous(range = c(0.1, 2), breaks = NULL) +
scale_fill_discrete(l = 40) +
labs(x = "Number of Components",
y = expression(paste('Prediction Error (||', alpha, '||'[F], ")"))) +
facet_wrap( ~ design, labeller = label_both) +
theme_gray(base_size = 14) +
theme(legend.position = "bottom") +
scale_x_continuous(breaks = seq(0, 10, 1)) +
ggtitle("Prediction Error",
sub = "Averaged over 20 replicated Datasets of same properties") +
guides(color = guide_legend(nrow = 1),
fill = guide_legend(nrow = 1))
plot(plt)
